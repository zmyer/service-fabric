// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
// ------------------------------------------------------------

#include "stdafx.h"

using namespace Api;
using namespace Common;

#if !defined(PLATFORM_UNIX)
BOOL APIENTRY DllMain(
    HMODULE module,
    DWORD reason,
    LPVOID reserved)
{
    UNREFERENCED_PARAMETER(module);
    UNREFERENCED_PARAMETER(reserved);

    switch (reason)
    {
    case DLL_PROCESS_ATTACH:
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}
#endif

//
// WARNING: 
//
// The signature below MUST exactly match (including the parameter names)
// with the signature generated by MIDL in the header file.
// Otherwise the linker does not apply the extern "C" specifier and exports 
// this function as C++ name mangled function instead of C style function.

/* [entry] */ HRESULT FabricCreateNativeImageStoreClient( 
	/* [in] */ BOOLEAN isInternal,
    /* [in] */ LPCWSTR workingDirectory,    
    /* [in] */ USHORT connectionStringsSize,
    /* [size_is][in] */ __RPC__in_ecount_full(connectionStringsSize) const LPCWSTR *connectionStrings,
    /* [in] */ __RPC__in REFIID riid,
    /* [retval][out] */ __RPC__deref_out_opt void **nativeImageStoreClient)
{
    Common::DllConfig::GetConfig();

    Api::IClientFactoryPtr factoryPtr;
    auto error = Client::ClientFactory::CreateClientFactory(
        connectionStringsSize,
        connectionStrings,
        factoryPtr);

    if (!error.IsSuccess()) { return Common::ComUtility::OnPublicApiReturn(move(error)); }

    std::wstring dir;
    auto hr = Common::StringUtility::LpcwstrToWstring(workingDirectory, true, dir);
    if (FAILED(hr)) { return Common::ComUtility::OnPublicApiReturn(hr); }
    
    Api::INativeImageStoreClientPtr implPtr;
    error = Management::ImageStore::NativeImageStore::CreateNativeImageStoreClient(
		isInternal == TRUE,
        dir,         
        factoryPtr,
        implPtr);

    if (!error.IsSuccess()) { return Common::ComUtility::OnPublicApiReturn(move(error)); }

    Common::ComPointer<IFabricNativeImageStoreClient> comPtr = Api::ComNativeImageStoreClient::CreateComNativeImageStoreClient(implPtr);

    hr = comPtr->QueryInterface(riid, nativeImageStoreClient);

    return Common::ComUtility::OnPublicApiReturn(hr);
}

/* [entry] */ HRESULT FabricCreateLocalNativeImageStoreClient( 
	/* [in] */ BOOLEAN isInternal,
    /* [in] */ LPCWSTR workingDirectory,    
    /* [in] */ __RPC__in REFIID riid,
    /* [retval][out] */ __RPC__deref_out_opt void **nativeImageStoreClient)
{
    Common::DllConfig::GetConfig();

    Api::IClientFactoryPtr factoryPtr;
    auto error = Client::ClientFactory::CreateLocalClientFactory(
        std::make_shared<FabricNodeConfig>(),
        factoryPtr);

    if (!error.IsSuccess()) { return Common::ComUtility::OnPublicApiReturn(move(error)); }

    std::wstring dir;
    auto hr = Common::StringUtility::LpcwstrToWstring(workingDirectory, true, dir);
    if (FAILED(hr)) { return Common::ComUtility::OnPublicApiReturn(hr); }

    Api::INativeImageStoreClientPtr implPtr;
    error = Management::ImageStore::NativeImageStore::CreateNativeImageStoreClient(
		isInternal == TRUE,
        dir, 
        factoryPtr,
        implPtr);

    if (!error.IsSuccess()) { return Common::ComUtility::OnPublicApiReturn(move(error)); }

    Common::ComPointer<IFabricNativeImageStoreClient> comPtr = Api::ComNativeImageStoreClient::CreateComNativeImageStoreClient(implPtr);

    hr = comPtr->QueryInterface(riid, nativeImageStoreClient);

    return Common::ComUtility::OnPublicApiReturn(hr);
}

HRESULT ArchiveApplicationPackage(
    LPCWSTR appPackageRootDirectory,
    IFabricNativeImageStoreProgressEventHandler const * progressHandler)
{
    TRY_COM_PARSE_PUBLIC_STRING2( appPackageRootDirectory )

    auto error = Management::ImageStore::ImageStoreUtility::ArchiveApplicationPackage(
        parsed_appPackageRootDirectory,
        WrapperFactory::create_rooted_com_proxy(const_cast<IFabricNativeImageStoreProgressEventHandler*>(progressHandler)));
    return Common::ComUtility::OnPublicApiReturn(move(error));
}

HRESULT TryExtractApplicationPackage(
    LPCWSTR appPackageRootDirectory, 
    IFabricNativeImageStoreProgressEventHandler const * progressHandler,
    BOOLEAN * archiveExists)
{
    if (archiveExists == NULL)
    {
        return Common::ComUtility::OnPublicApiReturn(E_POINTER);
    }

    TRY_COM_PARSE_PUBLIC_STRING2( appPackageRootDirectory )

    bool result = false;
    auto error = Management::ImageStore::ImageStoreUtility::TryExtractApplicationPackage(
        parsed_appPackageRootDirectory, 
        WrapperFactory::create_rooted_com_proxy(const_cast<IFabricNativeImageStoreProgressEventHandler*>(progressHandler)),
        result);

    if (error.IsSuccess())
    {
        *archiveExists = result ? TRUE : FALSE;
    }

    return Common::ComUtility::OnPublicApiReturn(move(error));
}

HRESULT GenerateSfpkg(
    LPCWSTR appPackageRootDirectory,
    LPCWSTR destinationDirectory,
    BOOLEAN applyCompression,
    LPCWSTR sfPkgName,
    IFabricStringResult ** sfPkgFilePath)
{
    TRY_COM_PARSE_PUBLIC_STRING2( appPackageRootDirectory )
    TRY_COM_PARSE_PUBLIC_STRING2( destinationDirectory )
    TRY_COM_PARSE_PUBLIC_STRING_ALLOW_NULL2( sfPkgName )

    std::wstring result;
    auto error = Management::ImageStore::ImageStoreUtility::GenerateSfpkg(
        parsed_appPackageRootDirectory,
        parsed_destinationDirectory,
        (applyCompression == TRUE),
        parsed_sfPkgName,
        result);
    if (!error.IsSuccess()) { return Common::ComUtility::OnPublicApiReturn(move(error)); }

    return ComStringResult::ReturnStringResult(result, sfPkgFilePath);
}

HRESULT ExpandSfpkg(
    LPCWSTR sfPkgFilePath,
    LPCWSTR appPackageRootDirectory)
{
    TRY_COM_PARSE_PUBLIC_STRING2( sfPkgFilePath )
    TRY_COM_PARSE_PUBLIC_STRING2( appPackageRootDirectory )

    auto error = Management::ImageStore::ImageStoreUtility::ExpandSfpkg(
        parsed_sfPkgFilePath,
        parsed_appPackageRootDirectory);
    return Common::ComUtility::OnPublicApiReturn(move(error));
}
