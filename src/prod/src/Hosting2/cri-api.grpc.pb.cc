// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cri-api.proto

#undef _WIN64
#undef WIN32_LEAN_AND_MEAN

#include "cri-api.pb.h"
#include "cri-api.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace runtime {

static const char* RuntimeService_method_names[] = {
  "/runtime.RuntimeService/Version",
  "/runtime.RuntimeService/RunPodSandbox",
  "/runtime.RuntimeService/StopPodSandbox",
  "/runtime.RuntimeService/RemovePodSandbox",
  "/runtime.RuntimeService/PodSandboxStatus",
  "/runtime.RuntimeService/ListPodSandbox",
  "/runtime.RuntimeService/CreateContainer",
  "/runtime.RuntimeService/StartContainer",
  "/runtime.RuntimeService/StopContainer",
  "/runtime.RuntimeService/RemoveContainer",
  "/runtime.RuntimeService/ListContainers",
  "/runtime.RuntimeService/ContainerStatus",
  "/runtime.RuntimeService/UpdateContainerResources",
  "/runtime.RuntimeService/ExecSync",
  "/runtime.RuntimeService/Exec",
  "/runtime.RuntimeService/Attach",
  "/runtime.RuntimeService/PortForward",
  "/runtime.RuntimeService/ContainerStats",
  "/runtime.RuntimeService/ListContainerStats",
  "/runtime.RuntimeService/UpdateRuntimeConfig",
  "/runtime.RuntimeService/Status",
};

std::unique_ptr< RuntimeService::Stub> RuntimeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< RuntimeService::Stub> stub(new RuntimeService::Stub(channel));
  return stub;
}

RuntimeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Version_(RuntimeService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunPodSandbox_(RuntimeService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopPodSandbox_(RuntimeService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePodSandbox_(RuntimeService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PodSandboxStatus_(RuntimeService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPodSandbox_(RuntimeService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateContainer_(RuntimeService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartContainer_(RuntimeService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopContainer_(RuntimeService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveContainer_(RuntimeService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListContainers_(RuntimeService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ContainerStatus_(RuntimeService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateContainerResources_(RuntimeService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecSync_(RuntimeService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Exec_(RuntimeService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Attach_(RuntimeService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PortForward_(RuntimeService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ContainerStats_(RuntimeService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListContainerStats_(RuntimeService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRuntimeConfig_(RuntimeService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Status_(RuntimeService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RuntimeService::Stub::Version(::grpc::ClientContext* context, const ::runtime::VersionRequest& request, ::runtime::VersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Version_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::VersionResponse>* RuntimeService::Stub::AsyncVersionRaw(::grpc::ClientContext* context, const ::runtime::VersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::VersionResponse>::Create(channel_.get(), cq, rpcmethod_Version_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::VersionResponse>* RuntimeService::Stub::PrepareAsyncVersionRaw(::grpc::ClientContext* context, const ::runtime::VersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::VersionResponse>::Create(channel_.get(), cq, rpcmethod_Version_, context, request, false);
}

::grpc::Status RuntimeService::Stub::RunPodSandbox(::grpc::ClientContext* context, const ::runtime::RunPodSandboxRequest& request, ::runtime::RunPodSandboxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RunPodSandbox_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::RunPodSandboxResponse>* RuntimeService::Stub::AsyncRunPodSandboxRaw(::grpc::ClientContext* context, const ::runtime::RunPodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::RunPodSandboxResponse>::Create(channel_.get(), cq, rpcmethod_RunPodSandbox_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::RunPodSandboxResponse>* RuntimeService::Stub::PrepareAsyncRunPodSandboxRaw(::grpc::ClientContext* context, const ::runtime::RunPodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::RunPodSandboxResponse>::Create(channel_.get(), cq, rpcmethod_RunPodSandbox_, context, request, false);
}

::grpc::Status RuntimeService::Stub::StopPodSandbox(::grpc::ClientContext* context, const ::runtime::StopPodSandboxRequest& request, ::runtime::StopPodSandboxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopPodSandbox_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::StopPodSandboxResponse>* RuntimeService::Stub::AsyncStopPodSandboxRaw(::grpc::ClientContext* context, const ::runtime::StopPodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::StopPodSandboxResponse>::Create(channel_.get(), cq, rpcmethod_StopPodSandbox_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::StopPodSandboxResponse>* RuntimeService::Stub::PrepareAsyncStopPodSandboxRaw(::grpc::ClientContext* context, const ::runtime::StopPodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::StopPodSandboxResponse>::Create(channel_.get(), cq, rpcmethod_StopPodSandbox_, context, request, false);
}

::grpc::Status RuntimeService::Stub::RemovePodSandbox(::grpc::ClientContext* context, const ::runtime::RemovePodSandboxRequest& request, ::runtime::RemovePodSandboxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemovePodSandbox_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::RemovePodSandboxResponse>* RuntimeService::Stub::AsyncRemovePodSandboxRaw(::grpc::ClientContext* context, const ::runtime::RemovePodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::RemovePodSandboxResponse>::Create(channel_.get(), cq, rpcmethod_RemovePodSandbox_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::RemovePodSandboxResponse>* RuntimeService::Stub::PrepareAsyncRemovePodSandboxRaw(::grpc::ClientContext* context, const ::runtime::RemovePodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::RemovePodSandboxResponse>::Create(channel_.get(), cq, rpcmethod_RemovePodSandbox_, context, request, false);
}

::grpc::Status RuntimeService::Stub::PodSandboxStatus(::grpc::ClientContext* context, const ::runtime::PodSandboxStatusRequest& request, ::runtime::PodSandboxStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PodSandboxStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::PodSandboxStatusResponse>* RuntimeService::Stub::AsyncPodSandboxStatusRaw(::grpc::ClientContext* context, const ::runtime::PodSandboxStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::PodSandboxStatusResponse>::Create(channel_.get(), cq, rpcmethod_PodSandboxStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::PodSandboxStatusResponse>* RuntimeService::Stub::PrepareAsyncPodSandboxStatusRaw(::grpc::ClientContext* context, const ::runtime::PodSandboxStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::PodSandboxStatusResponse>::Create(channel_.get(), cq, rpcmethod_PodSandboxStatus_, context, request, false);
}

::grpc::Status RuntimeService::Stub::ListPodSandbox(::grpc::ClientContext* context, const ::runtime::ListPodSandboxRequest& request, ::runtime::ListPodSandboxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListPodSandbox_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::ListPodSandboxResponse>* RuntimeService::Stub::AsyncListPodSandboxRaw(::grpc::ClientContext* context, const ::runtime::ListPodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ListPodSandboxResponse>::Create(channel_.get(), cq, rpcmethod_ListPodSandbox_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::ListPodSandboxResponse>* RuntimeService::Stub::PrepareAsyncListPodSandboxRaw(::grpc::ClientContext* context, const ::runtime::ListPodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ListPodSandboxResponse>::Create(channel_.get(), cq, rpcmethod_ListPodSandbox_, context, request, false);
}

::grpc::Status RuntimeService::Stub::CreateContainer(::grpc::ClientContext* context, const ::runtime::CreateContainerRequest& request, ::runtime::CreateContainerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateContainer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::CreateContainerResponse>* RuntimeService::Stub::AsyncCreateContainerRaw(::grpc::ClientContext* context, const ::runtime::CreateContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::CreateContainerResponse>::Create(channel_.get(), cq, rpcmethod_CreateContainer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::CreateContainerResponse>* RuntimeService::Stub::PrepareAsyncCreateContainerRaw(::grpc::ClientContext* context, const ::runtime::CreateContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::CreateContainerResponse>::Create(channel_.get(), cq, rpcmethod_CreateContainer_, context, request, false);
}

::grpc::Status RuntimeService::Stub::StartContainer(::grpc::ClientContext* context, const ::runtime::StartContainerRequest& request, ::runtime::StartContainerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartContainer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::StartContainerResponse>* RuntimeService::Stub::AsyncStartContainerRaw(::grpc::ClientContext* context, const ::runtime::StartContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::StartContainerResponse>::Create(channel_.get(), cq, rpcmethod_StartContainer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::StartContainerResponse>* RuntimeService::Stub::PrepareAsyncStartContainerRaw(::grpc::ClientContext* context, const ::runtime::StartContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::StartContainerResponse>::Create(channel_.get(), cq, rpcmethod_StartContainer_, context, request, false);
}

::grpc::Status RuntimeService::Stub::StopContainer(::grpc::ClientContext* context, const ::runtime::StopContainerRequest& request, ::runtime::StopContainerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopContainer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::StopContainerResponse>* RuntimeService::Stub::AsyncStopContainerRaw(::grpc::ClientContext* context, const ::runtime::StopContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::StopContainerResponse>::Create(channel_.get(), cq, rpcmethod_StopContainer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::StopContainerResponse>* RuntimeService::Stub::PrepareAsyncStopContainerRaw(::grpc::ClientContext* context, const ::runtime::StopContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::StopContainerResponse>::Create(channel_.get(), cq, rpcmethod_StopContainer_, context, request, false);
}

::grpc::Status RuntimeService::Stub::RemoveContainer(::grpc::ClientContext* context, const ::runtime::RemoveContainerRequest& request, ::runtime::RemoveContainerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveContainer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::RemoveContainerResponse>* RuntimeService::Stub::AsyncRemoveContainerRaw(::grpc::ClientContext* context, const ::runtime::RemoveContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::RemoveContainerResponse>::Create(channel_.get(), cq, rpcmethod_RemoveContainer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::RemoveContainerResponse>* RuntimeService::Stub::PrepareAsyncRemoveContainerRaw(::grpc::ClientContext* context, const ::runtime::RemoveContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::RemoveContainerResponse>::Create(channel_.get(), cq, rpcmethod_RemoveContainer_, context, request, false);
}

::grpc::Status RuntimeService::Stub::ListContainers(::grpc::ClientContext* context, const ::runtime::ListContainersRequest& request, ::runtime::ListContainersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListContainers_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::ListContainersResponse>* RuntimeService::Stub::AsyncListContainersRaw(::grpc::ClientContext* context, const ::runtime::ListContainersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ListContainersResponse>::Create(channel_.get(), cq, rpcmethod_ListContainers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::ListContainersResponse>* RuntimeService::Stub::PrepareAsyncListContainersRaw(::grpc::ClientContext* context, const ::runtime::ListContainersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ListContainersResponse>::Create(channel_.get(), cq, rpcmethod_ListContainers_, context, request, false);
}

::grpc::Status RuntimeService::Stub::ContainerStatus(::grpc::ClientContext* context, const ::runtime::ContainerStatusRequest& request, ::runtime::ContainerStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ContainerStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::ContainerStatusResponse>* RuntimeService::Stub::AsyncContainerStatusRaw(::grpc::ClientContext* context, const ::runtime::ContainerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ContainerStatusResponse>::Create(channel_.get(), cq, rpcmethod_ContainerStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::ContainerStatusResponse>* RuntimeService::Stub::PrepareAsyncContainerStatusRaw(::grpc::ClientContext* context, const ::runtime::ContainerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ContainerStatusResponse>::Create(channel_.get(), cq, rpcmethod_ContainerStatus_, context, request, false);
}

::grpc::Status RuntimeService::Stub::UpdateContainerResources(::grpc::ClientContext* context, const ::runtime::UpdateContainerResourcesRequest& request, ::runtime::UpdateContainerResourcesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateContainerResources_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::UpdateContainerResourcesResponse>* RuntimeService::Stub::AsyncUpdateContainerResourcesRaw(::grpc::ClientContext* context, const ::runtime::UpdateContainerResourcesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::UpdateContainerResourcesResponse>::Create(channel_.get(), cq, rpcmethod_UpdateContainerResources_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::UpdateContainerResourcesResponse>* RuntimeService::Stub::PrepareAsyncUpdateContainerResourcesRaw(::grpc::ClientContext* context, const ::runtime::UpdateContainerResourcesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::UpdateContainerResourcesResponse>::Create(channel_.get(), cq, rpcmethod_UpdateContainerResources_, context, request, false);
}

::grpc::Status RuntimeService::Stub::ExecSync(::grpc::ClientContext* context, const ::runtime::ExecSyncRequest& request, ::runtime::ExecSyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ExecSync_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::ExecSyncResponse>* RuntimeService::Stub::AsyncExecSyncRaw(::grpc::ClientContext* context, const ::runtime::ExecSyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ExecSyncResponse>::Create(channel_.get(), cq, rpcmethod_ExecSync_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::ExecSyncResponse>* RuntimeService::Stub::PrepareAsyncExecSyncRaw(::grpc::ClientContext* context, const ::runtime::ExecSyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ExecSyncResponse>::Create(channel_.get(), cq, rpcmethod_ExecSync_, context, request, false);
}

::grpc::Status RuntimeService::Stub::Exec(::grpc::ClientContext* context, const ::runtime::ExecRequest& request, ::runtime::ExecResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Exec_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::ExecResponse>* RuntimeService::Stub::AsyncExecRaw(::grpc::ClientContext* context, const ::runtime::ExecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ExecResponse>::Create(channel_.get(), cq, rpcmethod_Exec_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::ExecResponse>* RuntimeService::Stub::PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::runtime::ExecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ExecResponse>::Create(channel_.get(), cq, rpcmethod_Exec_, context, request, false);
}

::grpc::Status RuntimeService::Stub::Attach(::grpc::ClientContext* context, const ::runtime::AttachRequest& request, ::runtime::AttachResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Attach_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::AttachResponse>* RuntimeService::Stub::AsyncAttachRaw(::grpc::ClientContext* context, const ::runtime::AttachRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::AttachResponse>::Create(channel_.get(), cq, rpcmethod_Attach_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::AttachResponse>* RuntimeService::Stub::PrepareAsyncAttachRaw(::grpc::ClientContext* context, const ::runtime::AttachRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::AttachResponse>::Create(channel_.get(), cq, rpcmethod_Attach_, context, request, false);
}

::grpc::Status RuntimeService::Stub::PortForward(::grpc::ClientContext* context, const ::runtime::PortForwardRequest& request, ::runtime::PortForwardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PortForward_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::PortForwardResponse>* RuntimeService::Stub::AsyncPortForwardRaw(::grpc::ClientContext* context, const ::runtime::PortForwardRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::PortForwardResponse>::Create(channel_.get(), cq, rpcmethod_PortForward_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::PortForwardResponse>* RuntimeService::Stub::PrepareAsyncPortForwardRaw(::grpc::ClientContext* context, const ::runtime::PortForwardRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::PortForwardResponse>::Create(channel_.get(), cq, rpcmethod_PortForward_, context, request, false);
}

::grpc::Status RuntimeService::Stub::ContainerStats(::grpc::ClientContext* context, const ::runtime::ContainerStatsRequest& request, ::runtime::ContainerStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ContainerStats_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::ContainerStatsResponse>* RuntimeService::Stub::AsyncContainerStatsRaw(::grpc::ClientContext* context, const ::runtime::ContainerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ContainerStatsResponse>::Create(channel_.get(), cq, rpcmethod_ContainerStats_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::ContainerStatsResponse>* RuntimeService::Stub::PrepareAsyncContainerStatsRaw(::grpc::ClientContext* context, const ::runtime::ContainerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ContainerStatsResponse>::Create(channel_.get(), cq, rpcmethod_ContainerStats_, context, request, false);
}

::grpc::Status RuntimeService::Stub::ListContainerStats(::grpc::ClientContext* context, const ::runtime::ListContainerStatsRequest& request, ::runtime::ListContainerStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListContainerStats_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::ListContainerStatsResponse>* RuntimeService::Stub::AsyncListContainerStatsRaw(::grpc::ClientContext* context, const ::runtime::ListContainerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ListContainerStatsResponse>::Create(channel_.get(), cq, rpcmethod_ListContainerStats_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::ListContainerStatsResponse>* RuntimeService::Stub::PrepareAsyncListContainerStatsRaw(::grpc::ClientContext* context, const ::runtime::ListContainerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ListContainerStatsResponse>::Create(channel_.get(), cq, rpcmethod_ListContainerStats_, context, request, false);
}

::grpc::Status RuntimeService::Stub::UpdateRuntimeConfig(::grpc::ClientContext* context, const ::runtime::UpdateRuntimeConfigRequest& request, ::runtime::UpdateRuntimeConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateRuntimeConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::UpdateRuntimeConfigResponse>* RuntimeService::Stub::AsyncUpdateRuntimeConfigRaw(::grpc::ClientContext* context, const ::runtime::UpdateRuntimeConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::UpdateRuntimeConfigResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRuntimeConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::UpdateRuntimeConfigResponse>* RuntimeService::Stub::PrepareAsyncUpdateRuntimeConfigRaw(::grpc::ClientContext* context, const ::runtime::UpdateRuntimeConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::UpdateRuntimeConfigResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRuntimeConfig_, context, request, false);
}

::grpc::Status RuntimeService::Stub::Status(::grpc::ClientContext* context, const ::runtime::StatusRequest& request, ::runtime::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Status_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::StatusResponse>* RuntimeService::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::runtime::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::StatusResponse>::Create(channel_.get(), cq, rpcmethod_Status_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::StatusResponse>* RuntimeService::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::runtime::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::StatusResponse>::Create(channel_.get(), cq, rpcmethod_Status_, context, request, false);
}

RuntimeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::VersionRequest, ::runtime::VersionResponse>(
          std::mem_fn(&RuntimeService::Service::Version), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::RunPodSandboxRequest, ::runtime::RunPodSandboxResponse>(
          std::mem_fn(&RuntimeService::Service::RunPodSandbox), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::StopPodSandboxRequest, ::runtime::StopPodSandboxResponse>(
          std::mem_fn(&RuntimeService::Service::StopPodSandbox), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::RemovePodSandboxRequest, ::runtime::RemovePodSandboxResponse>(
          std::mem_fn(&RuntimeService::Service::RemovePodSandbox), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::PodSandboxStatusRequest, ::runtime::PodSandboxStatusResponse>(
          std::mem_fn(&RuntimeService::Service::PodSandboxStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::ListPodSandboxRequest, ::runtime::ListPodSandboxResponse>(
          std::mem_fn(&RuntimeService::Service::ListPodSandbox), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::CreateContainerRequest, ::runtime::CreateContainerResponse>(
          std::mem_fn(&RuntimeService::Service::CreateContainer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::StartContainerRequest, ::runtime::StartContainerResponse>(
          std::mem_fn(&RuntimeService::Service::StartContainer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::StopContainerRequest, ::runtime::StopContainerResponse>(
          std::mem_fn(&RuntimeService::Service::StopContainer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::RemoveContainerRequest, ::runtime::RemoveContainerResponse>(
          std::mem_fn(&RuntimeService::Service::RemoveContainer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::ListContainersRequest, ::runtime::ListContainersResponse>(
          std::mem_fn(&RuntimeService::Service::ListContainers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::ContainerStatusRequest, ::runtime::ContainerStatusResponse>(
          std::mem_fn(&RuntimeService::Service::ContainerStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::UpdateContainerResourcesRequest, ::runtime::UpdateContainerResourcesResponse>(
          std::mem_fn(&RuntimeService::Service::UpdateContainerResources), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::ExecSyncRequest, ::runtime::ExecSyncResponse>(
          std::mem_fn(&RuntimeService::Service::ExecSync), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::ExecRequest, ::runtime::ExecResponse>(
          std::mem_fn(&RuntimeService::Service::Exec), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::AttachRequest, ::runtime::AttachResponse>(
          std::mem_fn(&RuntimeService::Service::Attach), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::PortForwardRequest, ::runtime::PortForwardResponse>(
          std::mem_fn(&RuntimeService::Service::PortForward), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::ContainerStatsRequest, ::runtime::ContainerStatsResponse>(
          std::mem_fn(&RuntimeService::Service::ContainerStats), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::ListContainerStatsRequest, ::runtime::ListContainerStatsResponse>(
          std::mem_fn(&RuntimeService::Service::ListContainerStats), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::UpdateRuntimeConfigRequest, ::runtime::UpdateRuntimeConfigResponse>(
          std::mem_fn(&RuntimeService::Service::UpdateRuntimeConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::StatusRequest, ::runtime::StatusResponse>(
          std::mem_fn(&RuntimeService::Service::Status), this)));
}

RuntimeService::Service::~Service() {
}

::grpc::Status RuntimeService::Service::Version(::grpc::ServerContext* context, const ::runtime::VersionRequest* request, ::runtime::VersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::RunPodSandbox(::grpc::ServerContext* context, const ::runtime::RunPodSandboxRequest* request, ::runtime::RunPodSandboxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::StopPodSandbox(::grpc::ServerContext* context, const ::runtime::StopPodSandboxRequest* request, ::runtime::StopPodSandboxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::RemovePodSandbox(::grpc::ServerContext* context, const ::runtime::RemovePodSandboxRequest* request, ::runtime::RemovePodSandboxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::PodSandboxStatus(::grpc::ServerContext* context, const ::runtime::PodSandboxStatusRequest* request, ::runtime::PodSandboxStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ListPodSandbox(::grpc::ServerContext* context, const ::runtime::ListPodSandboxRequest* request, ::runtime::ListPodSandboxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::CreateContainer(::grpc::ServerContext* context, const ::runtime::CreateContainerRequest* request, ::runtime::CreateContainerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::StartContainer(::grpc::ServerContext* context, const ::runtime::StartContainerRequest* request, ::runtime::StartContainerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::StopContainer(::grpc::ServerContext* context, const ::runtime::StopContainerRequest* request, ::runtime::StopContainerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::RemoveContainer(::grpc::ServerContext* context, const ::runtime::RemoveContainerRequest* request, ::runtime::RemoveContainerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ListContainers(::grpc::ServerContext* context, const ::runtime::ListContainersRequest* request, ::runtime::ListContainersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ContainerStatus(::grpc::ServerContext* context, const ::runtime::ContainerStatusRequest* request, ::runtime::ContainerStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::UpdateContainerResources(::grpc::ServerContext* context, const ::runtime::UpdateContainerResourcesRequest* request, ::runtime::UpdateContainerResourcesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ExecSync(::grpc::ServerContext* context, const ::runtime::ExecSyncRequest* request, ::runtime::ExecSyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::Exec(::grpc::ServerContext* context, const ::runtime::ExecRequest* request, ::runtime::ExecResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::Attach(::grpc::ServerContext* context, const ::runtime::AttachRequest* request, ::runtime::AttachResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::PortForward(::grpc::ServerContext* context, const ::runtime::PortForwardRequest* request, ::runtime::PortForwardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ContainerStats(::grpc::ServerContext* context, const ::runtime::ContainerStatsRequest* request, ::runtime::ContainerStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ListContainerStats(::grpc::ServerContext* context, const ::runtime::ListContainerStatsRequest* request, ::runtime::ListContainerStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::UpdateRuntimeConfig(::grpc::ServerContext* context, const ::runtime::UpdateRuntimeConfigRequest* request, ::runtime::UpdateRuntimeConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::Status(::grpc::ServerContext* context, const ::runtime::StatusRequest* request, ::runtime::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ImageService_method_names[] = {
  "/runtime.ImageService/ListImages",
  "/runtime.ImageService/ImageStatus",
  "/runtime.ImageService/PullImage",
  "/runtime.ImageService/RemoveImage",
  "/runtime.ImageService/ImageFsInfo",
};

std::unique_ptr< ImageService::Stub> ImageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< ImageService::Stub> stub(new ImageService::Stub(channel));
  return stub;
}

ImageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListImages_(ImageService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImageStatus_(ImageService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PullImage_(ImageService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveImage_(ImageService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImageFsInfo_(ImageService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ImageService::Stub::ListImages(::grpc::ClientContext* context, const ::runtime::ListImagesRequest& request, ::runtime::ListImagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListImages_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::ListImagesResponse>* ImageService::Stub::AsyncListImagesRaw(::grpc::ClientContext* context, const ::runtime::ListImagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ListImagesResponse>::Create(channel_.get(), cq, rpcmethod_ListImages_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::ListImagesResponse>* ImageService::Stub::PrepareAsyncListImagesRaw(::grpc::ClientContext* context, const ::runtime::ListImagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ListImagesResponse>::Create(channel_.get(), cq, rpcmethod_ListImages_, context, request, false);
}

::grpc::Status ImageService::Stub::ImageStatus(::grpc::ClientContext* context, const ::runtime::ImageStatusRequest& request, ::runtime::ImageStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ImageStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::ImageStatusResponse>* ImageService::Stub::AsyncImageStatusRaw(::grpc::ClientContext* context, const ::runtime::ImageStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ImageStatusResponse>::Create(channel_.get(), cq, rpcmethod_ImageStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::ImageStatusResponse>* ImageService::Stub::PrepareAsyncImageStatusRaw(::grpc::ClientContext* context, const ::runtime::ImageStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ImageStatusResponse>::Create(channel_.get(), cq, rpcmethod_ImageStatus_, context, request, false);
}

::grpc::Status ImageService::Stub::PullImage(::grpc::ClientContext* context, const ::runtime::PullImageRequest& request, ::runtime::PullImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PullImage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::PullImageResponse>* ImageService::Stub::AsyncPullImageRaw(::grpc::ClientContext* context, const ::runtime::PullImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::PullImageResponse>::Create(channel_.get(), cq, rpcmethod_PullImage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::PullImageResponse>* ImageService::Stub::PrepareAsyncPullImageRaw(::grpc::ClientContext* context, const ::runtime::PullImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::PullImageResponse>::Create(channel_.get(), cq, rpcmethod_PullImage_, context, request, false);
}

::grpc::Status ImageService::Stub::RemoveImage(::grpc::ClientContext* context, const ::runtime::RemoveImageRequest& request, ::runtime::RemoveImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveImage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::RemoveImageResponse>* ImageService::Stub::AsyncRemoveImageRaw(::grpc::ClientContext* context, const ::runtime::RemoveImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::RemoveImageResponse>::Create(channel_.get(), cq, rpcmethod_RemoveImage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::RemoveImageResponse>* ImageService::Stub::PrepareAsyncRemoveImageRaw(::grpc::ClientContext* context, const ::runtime::RemoveImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::RemoveImageResponse>::Create(channel_.get(), cq, rpcmethod_RemoveImage_, context, request, false);
}

::grpc::Status ImageService::Stub::ImageFsInfo(::grpc::ClientContext* context, const ::runtime::ImageFsInfoRequest& request, ::runtime::ImageFsInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ImageFsInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::runtime::ImageFsInfoResponse>* ImageService::Stub::AsyncImageFsInfoRaw(::grpc::ClientContext* context, const ::runtime::ImageFsInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ImageFsInfoResponse>::Create(channel_.get(), cq, rpcmethod_ImageFsInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::runtime::ImageFsInfoResponse>* ImageService::Stub::PrepareAsyncImageFsInfoRaw(::grpc::ClientContext* context, const ::runtime::ImageFsInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::runtime::ImageFsInfoResponse>::Create(channel_.get(), cq, rpcmethod_ImageFsInfo_, context, request, false);
}

ImageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageService::Service, ::runtime::ListImagesRequest, ::runtime::ListImagesResponse>(
          std::mem_fn(&ImageService::Service::ListImages), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageService::Service, ::runtime::ImageStatusRequest, ::runtime::ImageStatusResponse>(
          std::mem_fn(&ImageService::Service::ImageStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageService::Service, ::runtime::PullImageRequest, ::runtime::PullImageResponse>(
          std::mem_fn(&ImageService::Service::PullImage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageService::Service, ::runtime::RemoveImageRequest, ::runtime::RemoveImageResponse>(
          std::mem_fn(&ImageService::Service::RemoveImage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageService::Service, ::runtime::ImageFsInfoRequest, ::runtime::ImageFsInfoResponse>(
          std::mem_fn(&ImageService::Service::ImageFsInfo), this)));
}

ImageService::Service::~Service() {
}

::grpc::Status ImageService::Service::ListImages(::grpc::ServerContext* context, const ::runtime::ListImagesRequest* request, ::runtime::ListImagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageService::Service::ImageStatus(::grpc::ServerContext* context, const ::runtime::ImageStatusRequest* request, ::runtime::ImageStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageService::Service::PullImage(::grpc::ServerContext* context, const ::runtime::PullImageRequest* request, ::runtime::PullImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageService::Service::RemoveImage(::grpc::ServerContext* context, const ::runtime::RemoveImageRequest* request, ::runtime::RemoveImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageService::Service::ImageFsInfo(::grpc::ServerContext* context, const ::runtime::ImageFsInfoRequest* request, ::runtime::ImageFsInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace runtime

