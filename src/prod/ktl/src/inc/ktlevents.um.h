//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once
#if !defined(PLATFORM_UNIX)
#include <wmistr.h>
#endif
#include <evntrace.h>
#include "evntprov.h"
//
//  Initial Defs
//
#if !defined(ETW_INLINE)
#define ETW_INLINE DECLSPEC_NOINLINE __inline
#endif

#if defined(__cplusplus)
extern "C" {
#endif

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION
#if  !defined(McGenDebug)
#define McGenDebug(a,b)
#endif


#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level;
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;

}
#endif

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{

    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);

}
#endif


//
// EnableCheckMacro
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled &&  McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Vista.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider.

    ControlCode - The parameter indicates whether the provider
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category
                      of events that the provider writes.

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;

        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif

    return;
}

#endif
#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION
//+
// Provider Microsoft-Windows-KTL Event Count 23
//+
EXTERN_C __declspec(selectany) const GUID MICROSOFT_WINDOWS_KTL = {0xe658f859, 0x2416, 0x4aef, {0x9d, 0xfc, 0x4d, 0x30, 0x38, 0x97, 0xa3, 0x7a}};

//
// Channel
//
#define MICROSOFT_WINDOWS_KTL_CHANNEL_chAdmin 0x10
#define MICROSOFT_WINDOWS_KTL_CHANNEL_chDebug 0x11
#define MICROSOFT_WINDOWS_KTL_CHANNEL_chError 0x12
#define MICROSOFT_WINDOWS_KTL_CHANNEL_chOp 0x13
#define MICROSOFT_WINDOWS_KTL_CHANNEL_chPerf 0x14
//
// Keyword
//
#define KEYWORD_PERF 0x1
#define KEYWORD_CHECKPOINT 0x2
#define KEYWORD_DEBUG 0x4
#define KEYWORD_ACTIVITY 0x8
#define KEYWORD_ERROR 0x10
#define KEYWORD_OPREATION 0x20
#define KEYWORD_CONFIGURATION 0x40

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_PRINTF = {0x65, 0x0, 0x11, 0x5, 0x0, 0x0, 0x4000000000000004};
#define EID_DBG_PRINTF_value 0x65
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_FUNCTION_ENTRY = {0x66, 0x0, 0x11, 0x5, 0x0, 0x0, 0x4000000000000004};
#define EID_DBG_FUNCTION_ENTRY_value 0x66
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_CHECKPOINT = {0x67, 0x0, 0x11, 0x5, 0x0, 0x0, 0x4000000000000000};
#define EID_DBG_CHECKPOINT_value 0x67
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_FUNCTION_EXIT = {0x68, 0x0, 0x11, 0x5, 0x0, 0x0, 0x4000000000000000};
#define EID_DBG_FUNCTION_EXIT_value 0x68
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_MY_MODULE_CHECKPOINTEXAMPLE = {0x69, 0x0, 0x13, 0x5, 0x0, 0x0, 0x1000000000000000};
#define EID_MY_MODULE_CHECKPOINTEXAMPLE_value 0x69
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_CHECKPOINT_WDATA = {0x6a, 0x0, 0x11, 0x5, 0x0, 0x0, 0x4000000000000000};
#define EID_DBG_CHECKPOINT_WDATA_value 0x6a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_CHECKPOINT_WSTATUS = {0x6b, 0x0, 0x11, 0x5, 0x0, 0x0, 0x4000000000000000};
#define EID_DBG_CHECKPOINT_WSTATUS_value 0x6b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_ERROR_WDATA = {0x6c, 0x0, 0x12, 0x2, 0x0, 0x0, 0x2000000000000010};
#define EID_DBG_ERROR_WDATA_value 0x6c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_ERROR_WSTATUS = {0x6d, 0x0, 0x12, 0x2, 0x0, 0x0, 0x2000000000000010};
#define EID_DBG_ERROR_WSTATUS_value 0x6d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ThreadHeldTooLong = {0x6e, 0x0, 0x11, 0x2, 0x0, 0x0, 0x4000000000000004};
#define ThreadHeldTooLong_value 0x6e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SecurityNegotiationSucceeded = {0x6f, 0x0, 0x11, 0x4, 0x0, 0x0, 0x4000000000000004};
#define SecurityNegotiationSucceeded_value 0x6f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SecurityNegotiationFailed = {0x70, 0x0, 0x11, 0x3, 0x0, 0x0, 0x4000000000000004};
#define SecurityNegotiationFailed_value 0x70
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_CHECKPOINT_AI = {0x71, 0x0, 0x11, 0x5, 0x0, 0x0, 0x4000000000000000};
#define EID_DBG_CHECKPOINT_AI_value 0x71
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_CHECKPOINT_WDATA_AI = {0x72, 0x0, 0x11, 0x5, 0x0, 0x0, 0x4000000000000000};
#define EID_DBG_CHECKPOINT_WDATA_AI_value 0x72
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_CHECKPOINT_WSTATUS_AI = {0x73, 0x0, 0x11, 0x5, 0x0, 0x0, 0x4000000000000000};
#define EID_DBG_CHECKPOINT_WSTATUS_AI_value 0x73
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_PRINTF_INFORMATIONAL = {0x74, 0x0, 0x11, 0x4, 0x0, 0x0, 0x4000000000000004};
#define EID_DBG_PRINTF_INFORMATIONAL_value 0x74
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_CHECKPOINT_INFORMATIONAL = {0x75, 0x0, 0x11, 0x4, 0x0, 0x0, 0x4000000000000000};
#define EID_DBG_CHECKPOINT_INFORMATIONAL_value 0x75
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_CHECKPOINT_WDATA_INFORMATIONAL = {0x76, 0x0, 0x11, 0x4, 0x0, 0x0, 0x4000000000000000};
#define EID_DBG_CHECKPOINT_WDATA_INFORMATIONAL_value 0x76
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_DBG_CHECKPOINT_WSTATUS_INFORMATIONAL = {0x77, 0x0, 0x11, 0x4, 0x0, 0x0, 0x4000000000000000};
#define EID_DBG_CHECKPOINT_WSTATUS_INFORMATIONAL_value 0x77
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_ERR_OUT_OF_MEMORY = {0x12d, 0x0, 0x12, 0x3, 0x0, 0x0, 0x2000000000000010};
#define EID_ERR_OUT_OF_MEMORY_value 0x12d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_FAILED_ASYNC_REQUEST = {0x12e, 0x0, 0x12, 0x3, 0x0, 0x0, 0x2000000000000010};
#define EID_FAILED_ASYNC_REQUEST_value 0x12e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_TRACE_CANCEL_CALLED = {0x12f, 0x0, 0x13, 0x4, 0x0, 0x0, 0x1000000000000000};
#define EID_TRACE_CANCEL_CALLED_value 0x12f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EID_TRACE_CONFIG_CHANGE = {0x130, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000040};
#define EID_TRACE_CONFIG_CHANGE_value 0x130

//
// Note on Generate Code from Manifest Windows Vista and above
//
//Structures :  are handled as a size and pointer pairs. The macro for the event will have an extra
//parameter for the size in bytes of the structure. Make sure that your structures have no extra padding.
//
//Strings: There are several cases that can be described in the manifest. For array of variable length
//strings, the generated code will take the count of characters for the whole array as an input parameter.
//
//SID No support for array of SIDs, the macro will take a pointer to the SID and use appropriate
//GetLengthSid function to get the length.
//

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Globals
//


//
// Event Enablement Bits
//

EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG Microsoft_Windows_KTLEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG Microsoft_Windows_KTLKeywords[11] = {0x4000000000000004, 0x4000000000000000, 0x1000000000000000, 0x2000000000000010, 0x4000000000000004, 0x4000000000000004, 0x4000000000000004, 0x4000000000000000, 0x2000000000000010, 0x1000000000000000, 0x8000000000000040};
EXTERN_C __declspec(selectany) const UCHAR Microsoft_Windows_KTLLevels[11] = {5, 5, 5, 2, 2, 4, 3, 4, 3, 4, 4};
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT MICROSOFT_WINDOWS_KTL_Context = {0, 0, 0, 0, 0, 0, 0, 0, 11, Microsoft_Windows_KTLEnableBits, Microsoft_Windows_KTLKeywords, Microsoft_Windows_KTLLevels};

EXTERN_C __declspec(selectany) REGHANDLE Microsoft_Windows_KTLHandle = (REGHANDLE)0;

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function register the provider with ETW USER mode.

Arguments:
    ProviderId - Provider Id to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to Registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return ERROR_SUCCESS;
    }

    Error = EventRegister( ProviderId, EnableCallback, CallbackContext, RegHandle);

    return Error;
}


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW USER mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If Provider has not register RegHandle = NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return ERROR_SUCCESS;
    }

    Error = EventUnregister(*RegHandle);
    *RegHandle = (REGHANDLE)0;

    return Error;
}
#endif
//
// Register with ETW Vista +
//
#ifndef EventRegisterMicrosoft_Windows_KTL
#define EventRegisterMicrosoft_Windows_KTL() McGenEventRegister(&MICROSOFT_WINDOWS_KTL, McGenControlCallbackV2, &MICROSOFT_WINDOWS_KTL_Context, &Microsoft_Windows_KTLHandle)
#endif

//
// UnRegister with ETW
//
#ifndef EventUnregisterMicrosoft_Windows_KTL
#define EventUnregisterMicrosoft_Windows_KTL() McGenEventUnregister(&Microsoft_Windows_KTLHandle)
#endif

//
// Enablement check macro for EID_DBG_PRINTF
//

#define EventEnabledEID_DBG_PRINTF() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for EID_DBG_PRINTF
//
#define TRACE_EID_DBG_PRINTF(Value)\
        EventEnabledEID_DBG_PRINTF() ?\
        Template_s(Microsoft_Windows_KTLHandle, &EID_DBG_PRINTF, Value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_FUNCTION_ENTRY
//

#define EventEnabledEID_DBG_FUNCTION_ENTRY() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for EID_DBG_FUNCTION_ENTRY
//
#define TRACE_EID_DBG_FUNCTION_ENTRY(Function, Line, File)\
        EventEnabledEID_DBG_FUNCTION_ENTRY() ?\
        Template_sqs(Microsoft_Windows_KTLHandle, &EID_DBG_FUNCTION_ENTRY, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_CHECKPOINT
//

#define EventEnabledEID_DBG_CHECKPOINT() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for EID_DBG_CHECKPOINT
//
#define TRACE_EID_DBG_CHECKPOINT(CheckpointId, Message, Function, Line, File)\
        EventEnabledEID_DBG_CHECKPOINT() ?\
        Template_dssqs(Microsoft_Windows_KTLHandle, &EID_DBG_CHECKPOINT, CheckpointId, Message, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_FUNCTION_EXIT
//

#define EventEnabledEID_DBG_FUNCTION_EXIT() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for EID_DBG_FUNCTION_EXIT
//
#define TRACE_EID_DBG_FUNCTION_EXIT(Function, Status, Message)\
        EventEnabledEID_DBG_FUNCTION_EXIT() ?\
        Template_sqs(Microsoft_Windows_KTLHandle, &EID_DBG_FUNCTION_EXIT, Function, Status, Message)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_MY_MODULE_CHECKPOINTEXAMPLE
//

#define EventEnabledEID_MY_MODULE_CHECKPOINTEXAMPLE() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for EID_MY_MODULE_CHECKPOINTEXAMPLE
//
#define TRACE_EID_MY_MODULE_CHECKPOINTEXAMPLE(CheckpointId, Status, Message)\
        EventEnabledEID_MY_MODULE_CHECKPOINTEXAMPLE() ?\
        Template_qqs(Microsoft_Windows_KTLHandle, &EID_MY_MODULE_CHECKPOINTEXAMPLE, CheckpointId, Status, Message)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_CHECKPOINT_WDATA
//

#define EventEnabledEID_DBG_CHECKPOINT_WDATA() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for EID_DBG_CHECKPOINT_WDATA
//
#define TRACE_EID_DBG_CHECKPOINT_WDATA(CheckpointId, Message, Status, D1, D2, D3, D4, Function, Line, File)\
        EventEnabledEID_DBG_CHECKPOINT_WDATA() ?\
        Template_dsqxxxxsqs(Microsoft_Windows_KTLHandle, &EID_DBG_CHECKPOINT_WDATA, CheckpointId, Message, Status, D1, D2, D3, D4, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_CHECKPOINT_WSTATUS
//

#define EventEnabledEID_DBG_CHECKPOINT_WSTATUS() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for EID_DBG_CHECKPOINT_WSTATUS
//
#define TRACE_EID_DBG_CHECKPOINT_WSTATUS(CheckpointId, Message, Status, Function, Line, File)\
        EventEnabledEID_DBG_CHECKPOINT_WSTATUS() ?\
        Template_dsqsqs(Microsoft_Windows_KTLHandle, &EID_DBG_CHECKPOINT_WSTATUS, CheckpointId, Message, Status, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_ERROR_WDATA
//

#define EventEnabledEID_DBG_ERROR_WDATA() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000008) != 0)

//
// Event Macro for EID_DBG_ERROR_WDATA
//
#define TRACE_EID_DBG_ERROR_WDATA(ActivityId, Message, Status, D1, D2, D3, D4, Function, Line, File)\
        EventEnabledEID_DBG_ERROR_WDATA() ?\
        Template_xsqxxxxsqs(Microsoft_Windows_KTLHandle, &EID_DBG_ERROR_WDATA, ActivityId, Message, Status, D1, D2, D3, D4, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_ERROR_WSTATUS
//

#define EventEnabledEID_DBG_ERROR_WSTATUS() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000008) != 0)

//
// Event Macro for EID_DBG_ERROR_WSTATUS
//
#define TRACE_EID_DBG_ERROR_WSTATUS(ActivityId, Message, Status, D1, D2, D3, D4, Function, Line, File)\
        EventEnabledEID_DBG_ERROR_WSTATUS() ?\
        Template_xsqxxxxsqs(Microsoft_Windows_KTLHandle, &EID_DBG_ERROR_WSTATUS, ActivityId, Message, Status, D1, D2, D3, D4, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ThreadHeldTooLong
//

#define EventEnabledThreadHeldTooLong() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for ThreadHeldTooLong
//
#define TRACE_ThreadHeldTooLong(Value)\
        EventEnabledThreadHeldTooLong() ?\
        Template_i(Microsoft_Windows_KTLHandle, &ThreadHeldTooLong, Value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SecurityNegotiationSucceeded
//

#define EventEnabledSecurityNegotiationSucceeded() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for SecurityNegotiationSucceeded
//
#define TRACE_SecurityNegotiationSucceeded(traceId, inbound, packageName, capabilities)\
        EventEnabledSecurityNegotiationSucceeded() ?\
        Template_xtzq(Microsoft_Windows_KTLHandle, &SecurityNegotiationSucceeded, traceId, inbound, packageName, capabilities)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SecurityNegotiationFailed
//

#define EventEnabledSecurityNegotiationFailed() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for SecurityNegotiationFailed
//
#define TRACE_SecurityNegotiationFailed(traceId, inbound, error)\
        EventEnabledSecurityNegotiationFailed() ?\
        Template_xtq(Microsoft_Windows_KTLHandle, &SecurityNegotiationFailed, traceId, inbound, error)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_CHECKPOINT_AI
//

#define EventEnabledEID_DBG_CHECKPOINT_AI() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for EID_DBG_CHECKPOINT_AI
//
#define TRACE_EID_DBG_CHECKPOINT_AI(ActivityId, Message, Function, Line, File)\
        EventEnabledEID_DBG_CHECKPOINT_AI() ?\
        Template_xssqs(Microsoft_Windows_KTLHandle, &EID_DBG_CHECKPOINT_AI, ActivityId, Message, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_CHECKPOINT_WDATA_AI
//

#define EventEnabledEID_DBG_CHECKPOINT_WDATA_AI() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for EID_DBG_CHECKPOINT_WDATA_AI
//
#define TRACE_EID_DBG_CHECKPOINT_WDATA_AI(ActivityId, Message, Status, D1, D2, D3, D4, Function, Line, File)\
        EventEnabledEID_DBG_CHECKPOINT_WDATA_AI() ?\
        Template_xsqxxxxsqs(Microsoft_Windows_KTLHandle, &EID_DBG_CHECKPOINT_WDATA_AI, ActivityId, Message, Status, D1, D2, D3, D4, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_CHECKPOINT_WSTATUS_AI
//

#define EventEnabledEID_DBG_CHECKPOINT_WSTATUS_AI() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for EID_DBG_CHECKPOINT_WSTATUS_AI
//
#define TRACE_EID_DBG_CHECKPOINT_WSTATUS_AI(ActivityId, Message, Status, Function, Line, File)\
        EventEnabledEID_DBG_CHECKPOINT_WSTATUS_AI() ?\
        Template_xsqsqs(Microsoft_Windows_KTLHandle, &EID_DBG_CHECKPOINT_WSTATUS_AI, ActivityId, Message, Status, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_PRINTF_INFORMATIONAL
//

#define EventEnabledEID_DBG_PRINTF_INFORMATIONAL() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for EID_DBG_PRINTF_INFORMATIONAL
//
#define TRACE_EID_DBG_PRINTF_INFORMATIONAL(Value)\
        EventEnabledEID_DBG_PRINTF_INFORMATIONAL() ?\
        Template_s(Microsoft_Windows_KTLHandle, &EID_DBG_PRINTF_INFORMATIONAL, Value)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_CHECKPOINT_INFORMATIONAL
//

#define EventEnabledEID_DBG_CHECKPOINT_INFORMATIONAL() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000080) != 0)

//
// Event Macro for EID_DBG_CHECKPOINT_INFORMATIONAL
//
#define TRACE_EID_DBG_CHECKPOINT_INFORMATIONAL(ActivityId, Message, Function, Line, File)\
        EventEnabledEID_DBG_CHECKPOINT_INFORMATIONAL() ?\
        Template_xssqs(Microsoft_Windows_KTLHandle, &EID_DBG_CHECKPOINT_INFORMATIONAL, ActivityId, Message, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_CHECKPOINT_WDATA_INFORMATIONAL
//

#define EventEnabledEID_DBG_CHECKPOINT_WDATA_INFORMATIONAL() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000080) != 0)

//
// Event Macro for EID_DBG_CHECKPOINT_WDATA_INFORMATIONAL
//
#define TRACE_EID_DBG_CHECKPOINT_WDATA_INFORMATIONAL(ActivityId, Message, Status, D1, D2, D3, D4, Function, Line, File)\
        EventEnabledEID_DBG_CHECKPOINT_WDATA_INFORMATIONAL() ?\
        Template_xsqxxxxsqs(Microsoft_Windows_KTLHandle, &EID_DBG_CHECKPOINT_WDATA_INFORMATIONAL, ActivityId, Message, Status, D1, D2, D3, D4, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_DBG_CHECKPOINT_WSTATUS_INFORMATIONAL
//

#define EventEnabledEID_DBG_CHECKPOINT_WSTATUS_INFORMATIONAL() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000080) != 0)

//
// Event Macro for EID_DBG_CHECKPOINT_WSTATUS_INFORMATIONAL
//
#define TRACE_EID_DBG_CHECKPOINT_WSTATUS_INFORMATIONAL(ActivityId, Message, Status, Function, Line, File)\
        EventEnabledEID_DBG_CHECKPOINT_WSTATUS_INFORMATIONAL() ?\
        Template_xsqsqs(Microsoft_Windows_KTLHandle, &EID_DBG_CHECKPOINT_WSTATUS_INFORMATIONAL, ActivityId, Message, Status, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_ERR_OUT_OF_MEMORY
//

#define EventEnabledEID_ERR_OUT_OF_MEMORY() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000100) != 0)

//
// Event Macro for EID_ERR_OUT_OF_MEMORY
//
#define TRACE_EID_ERR_OUT_OF_MEMORY(ActivityId, Status, ContextPointer, D1, D2, Function, Line, File)\
        EventEnabledEID_ERR_OUT_OF_MEMORY() ?\
        Template_xqpxxsqs(Microsoft_Windows_KTLHandle, &EID_ERR_OUT_OF_MEMORY, ActivityId, Status, ContextPointer, D1, D2, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_FAILED_ASYNC_REQUEST
//

#define EventEnabledEID_FAILED_ASYNC_REQUEST() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000100) != 0)

//
// Event Macro for EID_FAILED_ASYNC_REQUEST
//
#define TRACE_EID_FAILED_ASYNC_REQUEST(ActivityId, Status, ContextPointer, D1, D2, Function, Line, File)\
        EventEnabledEID_FAILED_ASYNC_REQUEST() ?\
        Template_xqpxxsqs(Microsoft_Windows_KTLHandle, &EID_FAILED_ASYNC_REQUEST, ActivityId, Status, ContextPointer, D1, D2, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_TRACE_CANCEL_CALLED
//

#define EventEnabledEID_TRACE_CANCEL_CALLED() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for EID_TRACE_CANCEL_CALLED
//
#define TRACE_EID_TRACE_CANCEL_CALLED(ActivityId, ContextPointer, Cancelable, Completed, D1, Function, Line, File)\
        EventEnabledEID_TRACE_CANCEL_CALLED() ?\
        Template_xpttxsqs(Microsoft_Windows_KTLHandle, &EID_TRACE_CANCEL_CALLED, ActivityId, ContextPointer, Cancelable, Completed, D1, Function, Line, File)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EID_TRACE_CONFIG_CHANGE
//

#define EventEnabledEID_TRACE_CONFIG_CHANGE() ((Microsoft_Windows_KTLEnableBits[0] & 0x00000400) != 0)

//
// Event Macro for EID_TRACE_CONFIG_CHANGE
//
#define TRACE_EID_TRACE_CONFIG_CHANGE(ClassName, ContextPointer, ParameterName, OldValue, NewValue)\
        EventEnabledEID_TRACE_CONFIG_CHANGE() ?\
        Template_spsxx(Microsoft_Windows_KTLHandle, &EID_TRACE_CONFIG_CHANGE, ClassName, ContextPointer, ParameterName, OldValue, NewValue)\
        : ERROR_SUCCESS\

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION


//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions
//
//
//Template from manifest : tDbgStr
//
#ifndef Template_s_def
#define Template_s_def
ETW_INLINE
ULONG
Template_s(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0
    )
{
#define ARGUMENT_COUNT_s 1

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_s];

    EventDataDescCreate(&EventData[0],
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_s, EventData);
}
#endif

//
//Template from manifest : tDbgEntry
//
#ifndef Template_sqs_def
#define Template_sqs_def
ETW_INLINE
ULONG
Template_sqs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_opt_ LPCSTR  _Arg2
    )
{
#define ARGUMENT_COUNT_sqs 3

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_sqs];

    EventDataDescCreate(&EventData[0],
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_sqs, EventData);
}
#endif

//
//Template from manifest : tDbgCheckpoint
//
#ifndef Template_dssqs_def
#define Template_dssqs_def
ETW_INLINE
ULONG
Template_dssqs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const signed int  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_opt_ LPCSTR  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_opt_ LPCSTR  _Arg4
    )
{
#define ARGUMENT_COUNT_dssqs 5

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_dssqs];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[1],
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2],
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4],
                        (_Arg4 != NULL) ? _Arg4 : "NULL",
                        (_Arg4 != NULL) ? (ULONG)((strlen(_Arg4) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_dssqs, EventData);
}
#endif

//
//Template from manifest : tMyCheckpoint
//
#ifndef Template_qqs_def
#define Template_qqs_def
ETW_INLINE
ULONG
Template_qqs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_ const signed int  _Arg1,
    _In_opt_ LPCSTR  _Arg2
    )
{
#define ARGUMENT_COUNT_qqs 3

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqs];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqs, EventData);
}
#endif

//
//Template from manifest : tDbgCheckpointWData
//
#ifndef Template_dsqxxxxsqs_def
#define Template_dsqxxxxsqs_def
ETW_INLINE
ULONG
Template_dsqxxxxsqs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const signed int  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const signed int  _Arg2,
    _In_ signed __int64  _Arg3,
    _In_ signed __int64  _Arg4,
    _In_ signed __int64  _Arg5,
    _In_ signed __int64  _Arg6,
    _In_opt_ LPCSTR  _Arg7,
    _In_ const unsigned int  _Arg8,
    _In_opt_ LPCSTR  _Arg9
    )
{
#define ARGUMENT_COUNT_dsqxxxxsqs 10

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_dsqxxxxsqs];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[1],
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[7],
                        (_Arg7 != NULL) ? _Arg7 : "NULL",
                        (_Arg7 != NULL) ? (ULONG)((strlen(_Arg7) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[8], &_Arg8, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[9],
                        (_Arg9 != NULL) ? _Arg9 : "NULL",
                        (_Arg9 != NULL) ? (ULONG)((strlen(_Arg9) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_dsqxxxxsqs, EventData);
}
#endif

//
//Template from manifest : tDbgCheckpointWStatus
//
#ifndef Template_dsqsqs_def
#define Template_dsqsqs_def
ETW_INLINE
ULONG
Template_dsqsqs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const signed int  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const signed int  _Arg2,
    _In_opt_ LPCSTR  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ LPCSTR  _Arg5
    )
{
#define ARGUMENT_COUNT_dsqsqs 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_dsqsqs];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[1],
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[3],
                        (_Arg3 != NULL) ? _Arg3 : "NULL",
                        (_Arg3 != NULL) ? (ULONG)((strlen(_Arg3) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5],
                        (_Arg5 != NULL) ? _Arg5 : "NULL",
                        (_Arg5 != NULL) ? (ULONG)((strlen(_Arg5) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_dsqsqs, EventData);
}
#endif

//
//Template from manifest : tDbgErrorWData
//
#ifndef Template_xsqxxxxsqs_def
#define Template_xsqxxxxsqs_def
ETW_INLINE
ULONG
Template_xsqxxxxsqs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ signed __int64  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const signed int  _Arg2,
    _In_ signed __int64  _Arg3,
    _In_ signed __int64  _Arg4,
    _In_ signed __int64  _Arg5,
    _In_ signed __int64  _Arg6,
    _In_opt_ LPCSTR  _Arg7,
    _In_ const unsigned int  _Arg8,
    _In_opt_ LPCSTR  _Arg9
    )
{
#define ARGUMENT_COUNT_xsqxxxxsqs 10

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xsqxxxxsqs];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[1],
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[7],
                        (_Arg7 != NULL) ? _Arg7 : "NULL",
                        (_Arg7 != NULL) ? (ULONG)((strlen(_Arg7) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[8], &_Arg8, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[9],
                        (_Arg9 != NULL) ? _Arg9 : "NULL",
                        (_Arg9 != NULL) ? (ULONG)((strlen(_Arg9) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xsqxxxxsqs, EventData);
}
#endif

//
//Template from manifest : tThreadHeldTooLong
//
#ifndef Template_i_def
#define Template_i_def
ETW_INLINE
ULONG
Template_i(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ signed __int64  _Arg0
    )
{
#define ARGUMENT_COUNT_i 1

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_i];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(signed __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_i, EventData);
}
#endif

//
//Template from manifest : tSecurityNegotiationSucceeded
//
#ifndef Template_xtzq_def
#define Template_xtzq_def
ETW_INLINE
ULONG
Template_xtzq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ signed __int64  _Arg0,
    _In_ const BOOL  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_ const signed int  _Arg3
    )
{
#define ARGUMENT_COUNT_xtzq 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xtzq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const signed int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xtzq, EventData);
}
#endif

//
//Template from manifest : tSecurityNegotiationFailed
//
#ifndef Template_xtq_def
#define Template_xtq_def
ETW_INLINE
ULONG
Template_xtq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ signed __int64  _Arg0,
    _In_ const BOOL  _Arg1,
    _In_ const signed int  _Arg2
    )
{
#define ARGUMENT_COUNT_xtq 3

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xtq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const signed int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xtq, EventData);
}
#endif

//
//Template from manifest : tDbgCheckpointAI
//
#ifndef Template_xssqs_def
#define Template_xssqs_def
ETW_INLINE
ULONG
Template_xssqs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ signed __int64  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_opt_ LPCSTR  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_opt_ LPCSTR  _Arg4
    )
{
#define ARGUMENT_COUNT_xssqs 5

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xssqs];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[1],
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2],
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4],
                        (_Arg4 != NULL) ? _Arg4 : "NULL",
                        (_Arg4 != NULL) ? (ULONG)((strlen(_Arg4) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xssqs, EventData);
}
#endif

//
//Template from manifest : tDbgCheckpointWStatusAI
//
#ifndef Template_xsqsqs_def
#define Template_xsqsqs_def
ETW_INLINE
ULONG
Template_xsqsqs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ signed __int64  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_ const signed int  _Arg2,
    _In_opt_ LPCSTR  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ LPCSTR  _Arg5
    )
{
#define ARGUMENT_COUNT_xsqsqs 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xsqsqs];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[1],
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[3],
                        (_Arg3 != NULL) ? _Arg3 : "NULL",
                        (_Arg3 != NULL) ? (ULONG)((strlen(_Arg3) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5],
                        (_Arg5 != NULL) ? _Arg5 : "NULL",
                        (_Arg5 != NULL) ? (ULONG)((strlen(_Arg5) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xsqsqs, EventData);
}
#endif

//
//Template from manifest : tError1
//
#ifndef Template_xqpxxsqs_def
#define Template_xqpxxsqs_def
ETW_INLINE
ULONG
Template_xqpxxsqs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ signed __int64  _Arg0,
    _In_ const signed int  _Arg1,
    _In_opt_ const void *  _Arg2,
    _In_ signed __int64  _Arg3,
    _In_ signed __int64  _Arg4,
    _In_opt_ LPCSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ LPCSTR  _Arg7
    )
{
#define ARGUMENT_COUNT_xqpxxsqs 8

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xqpxxsqs];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[5],
                        (_Arg5 != NULL) ? _Arg5 : "NULL",
                        (_Arg5 != NULL) ? (ULONG)((strlen(_Arg5) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[7],
                        (_Arg7 != NULL) ? _Arg7 : "NULL",
                        (_Arg7 != NULL) ? (ULONG)((strlen(_Arg7) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xqpxxsqs, EventData);
}
#endif

//
//Template from manifest : tCancel
//
#ifndef Template_xpttxsqs_def
#define Template_xpttxsqs_def
ETW_INLINE
ULONG
Template_xpttxsqs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ signed __int64  _Arg0,
    _In_opt_ const void *  _Arg1,
    _In_ const BOOL  _Arg2,
    _In_ const BOOL  _Arg3,
    _In_ signed __int64  _Arg4,
    _In_opt_ LPCSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ LPCSTR  _Arg7
    )
{
#define ARGUMENT_COUNT_xpttxsqs 8

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_xpttxsqs];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[5],
                        (_Arg5 != NULL) ? _Arg5 : "NULL",
                        (_Arg5 != NULL) ? (ULONG)((strlen(_Arg5) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[7],
                        (_Arg7 != NULL) ? _Arg7 : "NULL",
                        (_Arg7 != NULL) ? (ULONG)((strlen(_Arg7) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_xpttxsqs, EventData);
}
#endif

//
//Template from manifest : tConfigChange
//
#ifndef Template_spsxx_def
#define Template_spsxx_def
ETW_INLINE
ULONG
Template_spsxx(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ const void *  _Arg1,
    _In_opt_ LPCSTR  _Arg2,
    _In_ signed __int64  _Arg3,
    _In_ signed __int64  _Arg4
    )
{
#define ARGUMENT_COUNT_spsxx 5

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_spsxx];

    EventDataDescCreate(&EventData[0],
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(signed __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(signed __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_spsxx, EventData);
}
#endif

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
};
#endif

#define MSG_Keyword_Perf                     0x10000001L
#define MSG_Keyword_Checkpoint               0x10000002L
#define MSG_Keyword_Debug                    0x10000003L
#define MSG_Keyword_StartActivity            0x10000004L
#define MSG_Keyword_Error                    0x10000005L
#define MSG_Keyword_Operation                0x10000006L
#define MSG_Keyword_Configuration            0x10000007L
#define MSG_Provider_Name                    0x90000001L
#define MSG_Debug_Printf                     0xB0000065L
#define MSG_Debug_FunctionEntry              0xB0000066L
#define MSG_Debug_Checkpoint                 0xB0000067L
#define MSG_Debug_FunctionExit               0xB0000068L
#define MSG_MyModule_MyCheckpoint            0xB0000069L
#define MSG_Debug_CheckpointWData            0xB000006AL
#define MSG_Debug_CheckpointWStatus          0xB000006BL
#define MSG_Debug_ErrorWData                 0xB000006CL
#define MSG_Debug_ErrorWStatus               0xB000006DL
#define MSG_Debug_ThreadHeldTooLong          0xB000006EL
#define MSG_Debug_SecurityNegotiationSucceeded 0xB000006FL
#define MSG_Debug_SecurityNegotiationFailed  0xB0000070L
#define MSG_Debug_CheckpointAI               0xB0000071L
#define MSG_Debug_CheckpointWDataAI          0xB0000072L
#define MSG_Debug_CheckpointWStatusAI        0xB0000073L
#define MSG_Debug_PrintfInformational        0xB0000074L
#define MSG_Debug_CheckpointInformational    0xB0000075L
#define MSG_Debug_CheckpointWDataInformational 0xB0000076L
#define MSG_Debug_CheckpointWStatusInformational 0xB0000077L
#define MSG_Error_OutOfMemory                0xB000012DL
#define MSG_Error_FailedAsyncRequest         0xB000012EL
#define MSG_Trace_CancelCalled               0xB000012FL
#define MSG_Trace_ConfigChange               0xB0000130L
