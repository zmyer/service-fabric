//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MS.Test.WinFabric
{
    using MS.Test.WinFabric.Common;
    using System;
    using System.CodeDom.Compiler;
    using System.Collections;
    using System.Collections.Generic;
#if !DotNetCoreClr
    using Microsoft.ServiceFabric.ClusterManagementCommon;
#endif
    using System.Globalization;
    using System.Linq;
    using System.Reflection;

    public class TimeSpanInSecondsParser : ITestParameterParser<TimeSpanInSeconds>
    {
        public TimeSpanInSecondsParser()
        {
        }

        public bool TryParse(string value, out TimeSpanInSeconds result)
        {
            TimeSpan timeSpanValue;
            bool succeeded = TimeSpan.TryParse(value, out timeSpanValue);
            result = timeSpanValue;
            return succeeded;
        }
    }

    [Serializable]
    public struct TimeSpanInSeconds : IEquatable<TimeSpanInSeconds>
    {
        private TimeSpan time;

        public TimeSpanInSeconds(TimeSpan time)
        {
            this.time = time;
        }

        public static implicit operator TimeSpanInSeconds(TimeSpan timeSpan)
        {
            return new TimeSpanInSeconds(timeSpan);
        }

        public static implicit operator TimeSpan(TimeSpanInSeconds timeSpan)
        {
            return timeSpan.time;
        }

        public static bool operator ==(TimeSpanInSeconds timeSpan1, TimeSpanInSeconds timeSpan2)
        {
            return timeSpan1.Equals(timeSpan2);
        }

        public static bool operator !=(TimeSpanInSeconds timeSpan1, TimeSpanInSeconds timeSpan2)
        {
            return !(timeSpan1 == timeSpan2);
        }

        public override string ToString()
        {
            return this.time.TotalSeconds.ToString(CultureInfo.InvariantCulture);
        }

        public bool Equals(TimeSpanInSeconds other)
        {
            if (this.time.Equals(other.time))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public override bool Equals(object obj)
        {
            return this.Equals((TimeSpanInSeconds)obj);
        }

        public override int GetHashCode()
        {
            return this.time.GetHashCode();
        }
    }

    public sealed class PropertyNameValuePair
    {
        public PropertyNameValuePair()
        {
        }

        public string Name
        {
            get;
            set;
        }

        public object Value
        {
            get;
            set;
        }

        public string ProcessValue()
        {
            string value = null;
            IList list = this.Value as IList;
            if (list == null)
            {
                value = this.Value.ToString();
            }
            else
            {
                if (list.Count > 0)
                {
                    value = string.Join(",", (IEnumerable<object>)list);
                }
            }

            return value;
        }
    }

    [Serializable]
    public class VoteConfig
    {
        private const string DatabaseConnectionStringFormat = @"Server=(local);Database={0};Integrated Security=SSPI";
        private const string MasterDatabaseName = "master";
        public const string SqlVoteType = "SqlServer";
        public const string AzureVoteType = "WindowsAzure";

        private string databaseName;

        public VoteConfig(VoteConfig other)
        {
            if (other == null)
            {
                throw new ArgumentNullException("other");
            }

            this.VoteType = other.VoteType;
            this.VoteId = other.VoteId;
            this.HostName = other.HostName;
            this.DatabaseName = other.DatabaseName;
            this.VoteConnectionString = other.VoteConnectionString;
            this.SqlConnectionString = other.SqlConnectionString;
            this.AzureNodeAddress = other.AzureNodeAddress;
            this.AllowedSqlLogins = new List<string>();
            foreach (string login in other.AllowedSqlLogins)
            {
                this.AllowedSqlLogins.Add(login);
            }
        }

        public VoteConfig()
        {
            this.AllowedSqlLogins = new List<string>();
        }

        public static string MasterDatabaseConnectionString
        {
            get
            {
                return GetDatabaseConnectionString(MasterDatabaseName);
            }
        }

        public IList<string> AllowedSqlLogins
        {
            get;
            private set;
        }

        public string VoteType
        {
            get;
            private set;
        }

        public string VoteId
        {
            get;
            private set;
        }

        public string VoteConnectionString
        {
            get;
            private set;
        }

        public string HostName
        {
            get;
            private set;
        }

        public string DatabaseName
        {
            get
            {
                return this.databaseName;
            }

            private set
            {
                // Restrict character set to avoid inadvertent SQL injection.
                if (value.Any((c) => (c != '_') && !char.IsLetterOrDigit(c)))
                {
                    throw new ArgumentException("The database name must contain only alphanumeric or underscore characters.", "value");
                }

                this.databaseName = value;
            }
        }

        public string SqlConnectionString
        {
            get;
            private set;
        }

        public string AzureNodeAddress
        {
            get;
            private set;
        }

        public static string GetDatabaseConnectionString(string database)
        {
            return string.Format(CultureInfo.InvariantCulture, DatabaseConnectionStringFormat, database);
        }

        public static VoteConfig CreateSqlVoteConfig(string voteId, string hostName)
        {
            return VoteConfig.CreateSqlVoteConfig(voteId, hostName, new string[0]);
        }

        public static VoteConfig CreateSqlVoteConfig(string voteId, string hostName, IEnumerable<string> allowedLogins)
        {
            if (allowedLogins == null)
            {
                throw new ArgumentNullException("allowedLogins");
            }

            VoteConfig config = new VoteConfig();

            config.VoteType = VoteConfig.SqlVoteType;
            config.VoteId = voteId;
            config.HostName = hostName;
            config.DatabaseName = "WinFabric_" + config.VoteId;
            config.VoteConnectionString = string.Format(
                CultureInfo.InvariantCulture,
                @"Driver=SQL Server;Server={0};Database={1};Trusted_Connection=yes",
                config.HostName,
                config.DatabaseName);
            config.SqlConnectionString = @"Server=(local);Database=" + config.DatabaseName + ";Integrated Security=SSPI";
            config.AzureNodeAddress = string.Empty;

            foreach (string login in allowedLogins)
            {
                config.AllowedSqlLogins.Add(login);
            }

            return config;
        }

        public static VoteConfig CreateAzureVoteConfig(string voteId, string azureInstanceId, string address)
        {
            VoteConfig config = new VoteConfig();

            config.VoteType = VoteConfig.AzureVoteType;
            config.VoteId = voteId;
            config.HostName = string.Empty;
            config.DatabaseName = string.Empty;
            config.VoteConnectionString = azureInstanceId;
            config.SqlConnectionString = string.Empty;
            config.AzureNodeAddress = address;

            return config;
        }

        public override string ToString()
        {
            string result = string.Empty;
            result = string.Format(CultureInfo.InvariantCulture, "{0},{1}", this.VoteType, this.VoteConnectionString);

            return result;
        }

        public override bool Equals(object obj)
        {
            VoteConfig other = obj as VoteConfig;

            if (other == null)
            {
                return false;
            }

            return this.VoteType == other.VoteType &&
                this.VoteId.Equals(other.VoteId, StringComparison.OrdinalIgnoreCase) &&
                this.VoteConnectionString.Equals(other.VoteConnectionString, StringComparison.OrdinalIgnoreCase);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    [AttributeUsage(AttributeTargets.Property)]
    public sealed class ConfigIgnoreAttribute : Attribute
    {
        public ConfigIgnoreAttribute()
        {
        }
    }

    [Serializable]
    public abstract class ConfigSection
    {
        private static string DcaConnectionStringParameterName = "StoreConnectionString";

        protected ConfigSection(string sectionName)
        {
            this.SectionName = sectionName;
        }
        
        protected ConfigSection(ConfigSection other)
        {        
            if(other == null)
            {
                throw new ArgumentNullException("other");
            }
            
            this.SectionName = other.SectionName;
        }
        
        [ConfigIgnore]
        public string SectionName
        {
            get;
            private set;
        }

        public PropertyNameValuePair[] GetProperties()
        {
            return this.GetPropertiesInner();
        }

        public SettingsOverridesTypeSection ConvertToSettings(bool isEncrypt)
        {
            // Each ConfigSection property needs to map to a XSD Parameter type...
            List<SettingsOverridesTypeSectionParameter> parameters = new List<SettingsOverridesTypeSectionParameter>();
            foreach (PropertyNameValuePair property in this.GetProperties())
            {
                string value = property.ProcessValue();
                if (value != null)
                {
                    if (String.Compare(property.Name, DcaConnectionStringParameterName) == 0)
                    {
                        if(isEncrypt)
                        {
                            parameters.Add(new SettingsOverridesTypeSectionParameter() { Name = property.Name, Value = value, IsEncrypted = true });
                        }
                        else
                        {
                            parameters.Add(new SettingsOverridesTypeSectionParameter() { Name = property.Name, Value = value });                   
                        }
                    }
                    else
                    {
                        parameters.Add(new SettingsOverridesTypeSectionParameter() { Name = property.Name, Value = value });
                    }
                }
            }

            // Only write out the config section if there is at least 1 parameter set...
            SettingsOverridesTypeSection section = null;
            if (parameters.Count > 0)
            {
                section = new SettingsOverridesTypeSection() { Name = this.SectionName, Parameter = parameters.ToArray() };
            }

            return section;
        }

#if !DotNetCoreClr
        public SettingsSectionDescription ConvertToWRPSettings()
        {
            // Each ConfigSection property needs to map to a XSD Parameter type...
            List<SettingsParameterDescription> parameters = new List<SettingsParameterDescription>();
            foreach (PropertyNameValuePair property in this.GetProperties())
            {
                string value = property.ProcessValue();
                if (value != null)
                {
                    parameters.Add(new SettingsParameterDescription() { Name = property.Name, Value = value });
                }
            }

            // Only write out the config section if there is at least 1 parameter set...
            SettingsSectionDescription section = null;
            if (parameters.Count > 0)
            {
                section = new SettingsSectionDescription() { Name = this.SectionName, Parameters = parameters };
            }

            return section;
        }
#endif

        private static bool IsDictionary(PropertyInfo property)
        {
            return
                property.PropertyType.IsGenericType &&
                typeof(IDictionary<,>).IsAssignableFrom(property.PropertyType.GetGenericTypeDefinition());
        }

        private PropertyNameValuePair[] GetPropertiesInner()
        {
            Type sectionType = this.GetType();
            if (!sectionType.IsSerializable)
            {
                throw new InvalidOperationException("The type '" + sectionType.FullName + "' must be marked [Serializable].");
            }

            IList<PropertyNameValuePair> allProperties = new List<PropertyNameValuePair>();
            PropertyInfo[] properties = sectionType.GetProperties();
            foreach (PropertyInfo property in properties)
            {
                if (ConfigSection.IsDictionary(property))
                {
                    IDictionary listObject = (IDictionary)property.GetValue(this, null);
                    foreach (DictionaryEntry entry in listObject)
                    {
                        allProperties.Add(new PropertyNameValuePair() { Name = entry.Key.ToString(), Value = entry.Value });
                    }
                }
                else if (property.GetCustomAttributes(typeof(ConfigIgnoreAttribute), false).Length == 0)
                {
                    allProperties.Add(new PropertyNameValuePair() { Name = property.Name, Value = property.GetValue(this, null) });
                }
            }

            return allProperties.Where((p) => p.Value != null).ToArray();
        }
    }

    [Serializable]
    [GeneratedCode("GenerateConfigSections.pl", "1.0")]
    public class ClusterConfig
    {
        public ClusterConfig()
        {
__CLUSTER_CONFIG_CTOR__
            this.AzureBlobWinFabEtw = new ConsumerCustomSection(ConsumerCustomSection.DefaultAzureBlobEtwConsumerInstance);
            this.AzureBlobWinFabEtwInMemory = new ConsumerCustomSection(ConsumerCustomSection.DefaultAzureBlobEtwUploaderInMemoryConsumerInstance);
            this.AzureTableWinFabEtw = new ConsumerCustomSection(ConsumerCustomSection.DefaultAzureTableEtwConsumerInstance);
            this.AzureBlobWinFabCrashDump = new ConsumerCustomSection(ConsumerCustomSection.DefaultAzureBlobCrashDumpConsumerInstance);
            this.AzureTableWinFabPerfCounter = new ConsumerCustomSection(ConsumerCustomSection.DefaultAzureTablePerfCounterConsumerInstance);
            this.AzureBlobWinFabPerfCounter = new ConsumerCustomSection(ConsumerCustomSection.DefaultAzureBlobWinFabPerfCounterConsumerInstance);
            this.AzureTableWinFabEtwQueryable = new ConsumerCustomSection(ConsumerCustomSection.DefaultAzureTableWinFabEtwQueryableConsumerInstance);
            this.AzureBlobTestETW = new ConsumerCustomSection(ConsumerCustomSection.DefaultAzureBlobTestEtwConsumerInstance);

            this.ServerWinFabEtw = new ConsumerCustomSection(ConsumerCustomSection.DefaultServerWinFabEtwConsumerInstance);
            this.ServerTestEtw = new ConsumerCustomSection(ConsumerCustomSection.DefaultServerTestEtwConsumerInstance);
            this.ServerWinFabCrashDump = new ConsumerCustomSection(ConsumerCustomSection.DefaultServerWinFabCrashDumpConsumerInstance);
            this.ServerWinFabPerfCounter = new ConsumerCustomSection(ConsumerCustomSection.DefaultServerWinFabPerfCounterConsumerInstance);
            this.WrapperServiceLogSummary = new ConsumerCustomSection(ConsumerCustomSection.DefaultWrapperServiceLogConsumerInstance);

            this.WinFabEtlFile = new EtlFileProducerSection(ProducerCustomSection.DefaultEtlFileProducerInstance);
            this.WinFabEtlInMemory = new EtlFileProducerSection(ProducerCustomSection.DefaultEtlInMemoryProducerInstance);
            this.TestEtlFile = new EtlFileProducerSection(ProducerCustomSection.DefaultTestEtlFileProducerInstance);
            this.WinFabCrashDump = new ProducerCustomSection(ProducerCustomSection.DefaultCrashDumpProducerInstance);
            this.WinFabPerfCounterConfigReader = new ProducerCustomSection(ProducerCustomSection.DefaultPerfCounterProducerInstance);
            this.WinFabEtlFileQueryable = new ProducerCustomSection(ProducerCustomSection.DefaultEtlFileQueryableProducerInstance);
            this.WrapperServiceLogReader = new WrapperServiceLogReaderSection(ProducerCustomSection.DefaultWrapperServiceLogProducerInstance);

            this.AzureWinFabCsv = new ConsumerCustomSection(ConsumerCustomSection.DefaultAzureWinFabCsvConsumerInstance);
            this.WinFabLttProducer = new WinFabLttProducerSection(ProducerCustomSection.DefaultWinFabLttProducerInstance);
            this.WinFabLttFileQueryable = new WinFabLttProducerSection(ProducerCustomSection.DefaultWinFabLttProducerQueryInstance);

            this.UnreliableTransportSection = new UnreliableTransportCustomSection();
            this.InfrastructureService = new InfrastructureServiceSection();
            this.AzureActiveDirectoryService = new AzureActiveDirectoryServiceSection();
        }

        public ClusterConfig(ClusterConfig other)
        {
            if (other == null)
            {
                throw new ArgumentNullException("other");
            }

__CLUSTER_CONFIG_COPYCTOR__
            this.AzureBlobWinFabEtw = new ConsumerCustomSection(other.AzureBlobWinFabEtw);
            this.AzureBlobWinFabEtwInMemory = new ConsumerCustomSection(other.AzureBlobWinFabEtwInMemory);
            this.AzureTableWinFabEtw = new ConsumerCustomSection(other.AzureTableWinFabEtw);
            this.AzureBlobWinFabCrashDump = new ConsumerCustomSection(other.AzureBlobWinFabCrashDump);
            this.AzureTableWinFabPerfCounter = new ConsumerCustomSection(other.AzureTableWinFabPerfCounter);
            this.AzureBlobWinFabPerfCounter = new ConsumerCustomSection(other.AzureBlobWinFabPerfCounter);
            this.AzureTableWinFabEtwQueryable = new ConsumerCustomSection(other.AzureTableWinFabEtwQueryable);
            this.AzureBlobTestETW = new ConsumerCustomSection(other.AzureBlobTestETW);

            this.ServerWinFabEtw = new ConsumerCustomSection(other.ServerWinFabEtw);
            this.ServerTestEtw = new ConsumerCustomSection(other.ServerTestEtw);
            this.ServerWinFabCrashDump = new ConsumerCustomSection(other.ServerWinFabCrashDump);
            this.ServerWinFabPerfCounter = new ConsumerCustomSection(other.ServerWinFabPerfCounter);
            this.WrapperServiceLogSummary = new ConsumerCustomSection(other.WrapperServiceLogSummary);

            this.WinFabEtlFile = new EtlFileProducerSection(other.WinFabEtlFile);
            this.WinFabEtlInMemory = new EtlFileProducerSection(other.WinFabEtlInMemory);
            this.TestEtlFile = new EtlFileProducerSection(other.TestEtlFile);
            this.WinFabCrashDump = new ProducerCustomSection(other.WinFabCrashDump);
            this.WinFabPerfCounterConfigReader = new ProducerCustomSection(other.WinFabPerfCounterConfigReader);
            this.WinFabEtlFileQueryable = new ProducerCustomSection(other.WinFabEtlFileQueryable);
            this.WrapperServiceLogReader = new WrapperServiceLogReaderSection(other.WrapperServiceLogReader);

            this.AzureWinFabCsv = new ConsumerCustomSection(other.AzureWinFabCsv);
            this.WinFabLttProducer = new WinFabLttProducerSection(other.WinFabLttProducer);
            this.WinFabLttFileQueryable = new WinFabLttProducerSection(other.WinFabLttFileQueryable);

            this.UnreliableTransportSection = new UnreliableTransportCustomSection(other.UnreliableTransportSection);
            this.InfrastructureService = new InfrastructureServiceSection(other.InfrastructureService);
            this.AzureActiveDirectoryService = new AzureActiveDirectoryServiceSection(other.AzureActiveDirectoryService);
        }

        public IDictionary<string, ConfigSection> GetConfigSections()
        {
            Type clusterConfigType = typeof(ClusterConfig);
            PropertyInfo[] configProperties = clusterConfigType.GetProperties();

            Dictionary<string, ConfigSection> configSections = new Dictionary<string, ConfigSection>();
            foreach (PropertyInfo configProperty in configProperties)
            {
                ConfigSection section = configProperty.GetValue(this, null) as ConfigSection;
                configSections.Add(section.SectionName, section);
            }

            return configSections;
        }

__CLUSTER_CONFIG_PROPERTIES__
        // DCA Consumer Plugins
        [TestParameter]
        public ConsumerCustomSection AzureBlobWinFabEtw
        {
            get;
            private set;
        }

        [TestParameter]
        public ConsumerCustomSection AzureBlobWinFabEtwInMemory
        {
            get;
            private set;
        }

        [TestParameter]
        public ConsumerCustomSection AzureTableWinFabEtw
        {
            get;
            private set;
        }

        [TestParameter]
        public ConsumerCustomSection AzureBlobWinFabCrashDump
        {
            get;
            private set;
        }

        [TestParameter]
        public ConsumerCustomSection AzureTableWinFabPerfCounter
        {
            get;
            private set;
        }
        [TestParameter]
        public ConsumerCustomSection AzureBlobWinFabPerfCounter
        {
            get;
            private set;
        }
        [TestParameter]
        public ConsumerCustomSection AzureTableWinFabEtwQueryable
        {
            get;
            private set;
        }
        [TestParameter]
        public ConsumerCustomSection AzureBlobTestETW
        {
            get;
            private set;
        }
        [TestParameter]
        public ConsumerCustomSection ServerWinFabEtw 
        {
            get;
            private set;
        }

        [TestParameter]
        public ConsumerCustomSection ServerTestEtw
        {
            get;
            private set;
        }

        [TestParameter]
        public ConsumerCustomSection ServerWinFabCrashDump 
        {
            get;
            private set;
        }

        [TestParameter]
        public ConsumerCustomSection ServerWinFabPerfCounter 
        {
            get;
            private set;
        }
        
        [TestParameter]
        public ConsumerCustomSection WrapperServiceLogSummary
        {
            get;
            private set;
        }

        // DCA Producer Plugins
        [TestParameter]
        public EtlFileProducerSection WinFabEtlFile
        {
            get;
            private set;
        }

        [TestParameter]
        public EtlFileProducerSection WinFabEtlInMemory
        {
            get;
            private set;
        }

        [TestParameter]
        public EtlFileProducerSection TestEtlFile
        {
            get;
            private set;
        }

        [TestParameter]
        public ProducerCustomSection WinFabCrashDump
        {
            get;
            private set;
        }

        [TestParameter]
        public ProducerCustomSection WinFabPerfCounterConfigReader
        {
            get;
            private set;
        }

        [TestParameter]
        public ProducerCustomSection WinFabEtlFileQueryable
        {
            get;
            private set;
        }

        [TestParameter]
        public ConsumerCustomSection AzureWinFabCsv
        {
            get;
            private set;
        }

        [TestParameter]
        public WinFabLttProducerSection WinFabLttProducer
        {
            get;
            private set;
        }

        [TestParameter]
        public WinFabLttProducerSection WinFabLttFileQueryable
        {
            get;
            private set;
        }
        
        public WrapperServiceLogReaderSection WrapperServiceLogReader
        {
            get;
            private set;
        }

        [TestParameter]
        public UnreliableTransportCustomSection UnreliableTransportSection
        {
            get;
            private set;
        }

        /// <summary>
        /// There could be multiple Infrastructure Services in a SF cluster. One for each FC cluster.
        /// We don't accommodate that currently since we don't foresee multi-FC cluster testing on PaaS v1.
        /// </summary>
        [TestParameter]
        public InfrastructureServiceSection InfrastructureService 
        { 
            get; 
            private set; 
        }

        [TestParameter]
        public AzureActiveDirectoryServiceSection AzureActiveDirectoryService
        { 
            get; 
            private set; 
        }
    }
    
__CONFIG_CONTENT__
    // This section contains an exhaustive list of possible key-value pairs in the section. 
    // It is assumed that the person enabling DCA sections is aware of the appropriate keys that go with the corresponding sections.
    // Refer to: base\fabric\samples\external\Manifest\ClusterManifest for specific sample manifests
    // Refer to: base\fabric\Setup\FabricDeployer\ServerDeployer\ClusterManifest-Server-Default.xml for checked-in cluster manifest for Server deployment.
    [Serializable]
    public class ConsumerCustomSection : ConfigSection
    {
        public const bool DefaultIsEnabled = true;
        public const int DefaultUploadIntervalInMinutes = 5;
        public const int DefaultDataDeletionAgeInDays = 7;
        public static readonly string DefaultContainerName = string.Empty;
        public static readonly string DefaultTableName = string.Empty;
        public static readonly string DefaultStoreConnectionString = string.Empty;
        public static readonly string DefaultTableNamePrefix = string.Empty;

        public const string DefaultAzureBlobEtwCsvUploaderConsumerType = "AzureBlobEtwCsvUploader";
        public const string DefaultAzureBlobEtwUploaderConsumerType = "AzureBlobEtwUploader";
        public const string DefaultAzureTableEtwEventUploaderConsumerType = "AzureTableEtwEventUploader";
        public const string DefaultAzureBlobFolderUploaderConsumerType = "AzureBlobFolderUploader";
        public const string DefaultAzureTablePerformanceCounterUploaderConsumerType = "AzureTablePerformanceCounterUploader";
        public const string DefaultAzureTableQueryableEventUploaderConsumerType = "AzureTableQueryableEventUploader";
        public const string DefaultAzureTableQueryableCsvUploaderConsumerType = "AzureTableQueryableCsvUploader";
        public const string DefaultFileShareUploaderConsumerType = "FileShareFolderUploader";
        public const string DefaultFileShareEtwCsvUploaderConsumerType = "FileShareEtwCsvUploader";
        public const string DefaultAzureBlobTestEtwConsumerInstance = "AzureBlobTestEtw";

        public const string DefaultAzureBlobEtwConsumerInstance = "AzureBlobEtw";
        public const string DefaultAzureBlobEtwUploaderInMemoryConsumerInstance = "AzureBlobWinFabEtwInMemory";
        public const string DefaultAzureTableEtwConsumerInstance = "AzureTableEtw";
        public const string DefaultAzureBlobCrashDumpConsumerInstance = "AzureBlobCrashDump";
        public const string DefaultAzureTablePerfCounterConsumerInstance = "AzureTablePerfCounter";
        public const string DefaultAzureBlobWinFabPerfCounterConsumerInstance = "AzureBlobWinFabPerfCounter";
        public const string DefaultAzureTableWinFabEtwQueryableConsumerInstance = "AzureTableWinFabEtwQueryable";
        public const string DefaultWrapperServiceLogConsumerInstance = "WrapperServiceLogConsumer";

        public const string DefaultServerWinFabEtwConsumerInstance = "ServerEtw";
        public const string DefaultServerTestEtwConsumerInstance = "ServerTestEtw";
        public const string DefaultServerWinFabCrashDumpConsumerInstance = "ServerCrashDump";
        public const string DefaultServerWinFabPerfCounterConsumerInstance = "ServerPerfCounter";

        // Linux consumers
        public const string DefaultAzureWinFabCsvConsumerInstance = "AzureWinFabCsv";
        public const string DefaultAzureWinFabCsvConsumerType = "AzureBlobCsvUploader";

        public ConsumerCustomSection(string sectionName, string consumerType, string producerInstance)
            : this(sectionName)
        {
            this.ConsumerType = consumerType;
            this.ProducerInstance = producerInstance;
        }

        public ConsumerCustomSection(string sectionName)
            : base(sectionName)
        {
        }

        public ConsumerCustomSection(ConsumerCustomSection other)
            : base(other)
        {
            this.ConsumerType = other.ConsumerType;
            this.ProducerInstance = other.ProducerInstance;
            this.IsEnabled = other.IsEnabled;
            this.StoreConnectionString = other.StoreConnectionString;
            this.LogFilter = other.LogFilter;
            this.UploadIntervalInMinutes = other.UploadIntervalInMinutes;
            this.DataDeletionAgeInDays = other.DataDeletionAgeInDays;
            this.TableName = other.TableName;
            this.ContainerName = other.ContainerName;
            this.DirectoryName = other.DirectoryName;
            this.DeploymentId = other.DeploymentId;
            this.TableNamePrefix = other.TableNamePrefix;
            this.TestOnlyFlushDataOnDispose = other.TestOnlyFlushDataOnDispose;
        }

        [TestParameter]
        public string ConsumerType
        {
            get;
            set;
        }

        [TestParameter]
        public string ProducerInstance
        {
            get;
            set;
        }

        [TestParameter]
        public bool? IsEnabled
        {
            get;
            set;
        }

        [TestParameter]
        public string StoreConnectionString
        {
            get;
            set;
        }

        [TestParameter]
        public string LogFilter
        {
            get;
            set;
        }


        [TestParameter]
        public int? UploadIntervalInMinutes
        {
            get;
            set;
        }

        [TestParameter]
        public string ContainerName
        {
            get;
            set;
        }

        [TestParameter]
        public string DirectoryName
        {
            get;
            set;
        }

        [TestParameter]
        public string DeploymentId
        {
            get;
            set;
        }

        [TestParameter]
        public string TableName
        {
            get;
            set;
        }

        [TestParameter]
        public string TableNamePrefix
        {
            get;
            set;
        }

        [TestParameter]
        public int? DataDeletionAgeInDays
        {
            get;
            set;
        }

        [TestParameter]
        public bool? TestOnlyFlushDataOnDispose
        {
            get;
            set;
        }
    }

    [Serializable]
    public class WinFabLttProducerSection : ProducerCustomSection
    {
        public WinFabLttProducerSection(string sectionName)
            : base(sectionName)
        {
        }

        public WinFabLttProducerSection(WinFabLttProducerSection other)
            : base(other)
        {
            if (other == null)
            {
                throw new ArgumentNullException("other");
            }

            this.LttReadIntervalInMinutes = other.LttReadIntervalInMinutes;
            this.ServiceFabricLttType = other.ServiceFabricLttType;
        }

        [TestParameter]
        public int? LttReadIntervalInMinutes
        {
            get;
            set;
        }
        
        [TestParameter]
        public string ServiceFabricLttType
        {
            get;
            set;
        }
    }

    [Serializable]
    public class EtlFileProducerSection : ProducerCustomSection
    {
        public EtlFileProducerSection(string sectionName)
            : base(sectionName)
        {
        }

        public EtlFileProducerSection(EtlFileProducerSection other)
            : base(other)
        {    
            if(other == null)
            {
                throw new ArgumentNullException("other");
            }

            this.TestOnlyCustomManifestPath = other.TestOnlyCustomManifestPath;
            this.TestOnlyDataDeletionAgeInMinutes = other.TestOnlyDataDeletionAgeInMinutes;
            this.TestOnlyEtlFilePatterns = other.TestOnlyEtlFilePatterns;
            this.TestOnlyEtlPath = other.TestOnlyEtlPath;
            this.TestOnlyFlushDataOnDispose = other.TestOnlyFlushDataOnDispose;
            this.TestOnlyProcessingWinFabEtlFiles = other.TestOnlyProcessingWinFabEtlFiles;
        }

        [TestParameter]
        public int? TestOnlyDataDeletionAgeInMinutes
        {
            get;
            set;
        }

        [TestParameter]
        public string TestOnlyEtlPath
        {
            get;
            set;
        }

        [TestParameter]
        public string TestOnlyEtlFilePatterns
        {
            get;
            set;
        }

        [TestParameter]
        public string TestOnlyCustomManifestPath
        {
            get;
            set;
        }

        [TestParameter]
        public bool? TestOnlyProcessingWinFabEtlFiles
        {
            get;
            set;
        }

        [TestParameter]
        public bool? TestOnlyFlushDataOnDispose
        {
            get;
            set;
        }
    }
    
    [Serializable]
    public class WrapperServiceLogReaderSection : ProducerCustomSection
    {
        public const string DefaultLogFolderPath = @"C:\WFRoot\WindowsFabricDeployment";
    
        public WrapperServiceLogReaderSection(string sectionName)
            : base(sectionName)
        {
        }

        public WrapperServiceLogReaderSection(WrapperServiceLogReaderSection other)
            : base(other)
        {
            if (other == null)
            {
                throw new ArgumentNullException("other");
            }

            this.FolderPath = other.FolderPath;
        }

        [TestParameter]
        public string FolderPath
        {
            get;
            set;
        }
    }

    [Serializable]
    public class ProducerCustomSection : ConfigSection
    {
        public const string DefaultEtlFileProducerType = "EtlFileProducer";
        public const string DefaultEtlInMemoryProducerType = "EtlInMemoryProducer";
        public const string DefaultFolderProducerType = "FolderProducer";
        public const string DefaultPerfCounterProducerType = "PerformanceCounterConfigReader";

        public const string DefaultCrashDumpProducerInstance = "WinFabCrashDump";
        public const string DefaultEtlFileProducerInstance = "WinFabEtlFile";
        public const string DefaultEtlInMemoryProducerInstance = "WinFabEtlInMemory";
        public const string DefaultTestEtlFileProducerInstance = "TestEtlFile";
        public const string DefaultPerfCounterProducerInstance = "WinFabPerfCounter";
        public const string DefaultEtlFileQueryableProducerInstance = "WinFabEtlFileQueryable";
        public const string DefaultWrapperServiceLogProducerInstance = "WrapperServiceLog";

        public const string DefaultCrashDumpsFolderType = "WindowsFabricCrashDumps";
        public const string DefaultPerfCountersFolderType = "WindowsFabricPerformanceCounters";
        public const string DefaultWindowsFabricEtlType = "QueryEtl";
        public const string DefaultCustomFolderType = "CustomFolder";

        // Linux producers
        public const string DefaultWinFabLttProducerInstance = "WinFabLttProducer";
        public const string DefaultWinFabLttProducerQueryInstance = "WinFabLttFileQueryable";
        public const string DefaultWinFabLttProducerType = "LttProducer";
        public const string DefaultServiceFabricLttType = "QueryLtt";
    
        public const bool DefaultIsEnabled = true;
        public const int DefaultEtlReadIntervalInMinutes = 5;
        public const int DefaultDataDeletionAgeInDays = 7;

        public ProducerCustomSection(string sectionName)
            : base(sectionName)
        {
        }

        public ProducerCustomSection(ProducerCustomSection other)
            : base(other)
        {
            this.IsEnabled = other.IsEnabled;
            this.ProducerType = other.ProducerType;
            this.FolderType = other.FolderType;
            this.EtlReadIntervalInMinutes = other.EtlReadIntervalInMinutes;
            this.DataDeletionAgeInDays = other.DataDeletionAgeInDays;
        this.WindowsFabricEtlType = other.WindowsFabricEtlType;
        }

        [TestParameter]
        public string ProducerType
        {
            get;
            set;
        }

        [TestParameter]
        public bool? IsEnabled
        {
            get;
            set;
        }

        [TestParameter]
        public string FolderType
        {
            get;
            set;
        }

        [TestParameter]
        public int? EtlReadIntervalInMinutes
        {
            get;
            set;
        }

        [TestParameter]
        public int? DataDeletionAgeInDays
        {
            get;
            set;
        }

        [TestParameter]
        public string WindowsFabricEtlType
        {
            get;
            set;
        }
    }

    [Serializable]
    public class UnreliableTransportCustomSection : ConfigSection
    {
        public static readonly TimeSpan DefaultMaxAllowedDelayInSeconds = TimeSpan.FromSeconds(40);

        public UnreliableTransportCustomSection()
            : base("UnreliableTransport")
        {
            this.PropertyGroup = new Dictionary<string, string>();
        }

        public UnreliableTransportCustomSection(UnreliableTransportCustomSection other)
            : this()
        {
            if (other == null)
            {
                throw new ArgumentNullException("other");
            }

            this.MaxAllowedDelayInSeconds = other.MaxAllowedDelayInSeconds;
            foreach (KeyValuePair<string, string> data in other.PropertyGroup)
            {
                this.PropertyGroup.Add(data.Key, data.Value);
            }
        }

        [TestParameter(Parser = typeof(TimeSpanInSecondsParser))]
        public TimeSpanInSeconds? MaxAllowedDelayInSeconds
        {
            get;
            set;
        }

        [TestParameter]
        public IDictionary<string, string> PropertyGroup
        {
            get;
            private set;
        }
    }

    public class SystemServiceConfigSectionBase : ConfigSection
    {
        public SystemServiceConfigSectionBase(string configSectionName)
            : base(configSectionName)
        {
        }

        public SystemServiceConfigSectionBase(SystemServiceConfigSectionBase other)
            : base(other)
        {
            this.IsEnabled = other.IsEnabled;
            this.PlacementConstraints = other.PlacementConstraints;
        }

        /// <summary>
        /// Whether the system service is enabled. 
        /// This is not actually present as a key in the resulting manifest, but is added here to
        /// allow the service to be optionally enabled on the cluster.
        /// If set to false, the cluster manifest xml will not contain this section.
        /// </summary>
        [TestParameter]
        public bool? IsEnabled
        {
            get;
            set;
        }

        [TestParameter]
        public string PlacementConstraints
        {
            get;
            set;
        }
    }

    /// <remarks>
    /// InfrastructureService (IS) doesn't expose its config properties from native code (unlike other system services). 
    /// Therefore, test frameworks cannot adjust these config keys. This class is a workaround to this inability of IS.
    /// This class duplicates certain IS config properties which the test framework can use.
    /// </remarks>
    [Serializable]
    public class InfrastructureServiceSection : SystemServiceConfigSectionBase
    {
        public InfrastructureServiceSection()
            : base("InfrastructureService")
        {
            this.CoordinatorType = "AzureParallel";
            this.DynamicSettings = new Dictionary<string, string>();
        }

        public InfrastructureServiceSection(InfrastructureServiceSection other)
            : base(other)
        {
            this.CoordinatorType = other.CoordinatorType;
            this.MinReplicaSetSize = other.MinReplicaSetSize;
            this.TargetReplicaSetSize = other.TargetReplicaSetSize;
            this.EnableRepairExecution = other.EnableRepairExecution;            
            this.DynamicSettings = new Dictionary<string, string>(other.DynamicSettings);
        }

        [TestParameter]
        public string CoordinatorType
        {
            get;
            set;
        }

        /// <remarks>
        /// For some reason (probably serialization related), the perl script parsing this file doesn't like plain int. Hence using int?
        /// </remarks>
        [TestParameter]
        public int? MinReplicaSetSize
        {
            get;
            set;
        }

        [TestParameter]
        public int? TargetReplicaSetSize
        {
            get;
            set;
        }

        [TestParameter]
        public bool? EnableRepairExecution
        {
            get;
            set;
        }        

        [TestParameter]
        public IDictionary<string, string> DynamicSettings
        {
            get;
            private set;
        }
    }

    [Serializable]
    public class AzureActiveDirectoryServiceSection : SystemServiceConfigSectionBase
    {
        public AzureActiveDirectoryServiceSection()
            : base("AzureActiveDirectoryService")
        {
        }

        public AzureActiveDirectoryServiceSection(AzureActiveDirectoryServiceSection other)
            : base(other)
        {
        }
    }
}
