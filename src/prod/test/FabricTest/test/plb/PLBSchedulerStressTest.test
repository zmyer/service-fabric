# [owner nipuzovi,yangli]
# Stress test for the PLB scheduler. Idea is to create a situation that PLB cannot resolve:
# Case 1: violations that can't be corrected
#   We will create a situation with violations that cannot be corrected, and we'll expect PLB to place new replicas.
#   At the same time, we will instruct the scheduler to try constraint check as soon as possible (MinConstraintCheckInterval = 0)
# Case 2:
#   We will create a situation with many replicas in the system that have to be placed, and after a while we will make it possible 
#   to fix constraint violation created in previous case.
#   At the same time, we will instruct the scheduler to try placement as soon as there are replicas to be placed (MinPlacementInterval = 0)
# In both cases, we will keep the interval for background task that processes update at a very low value (1 ms), so that it can interrupt always.

votes 10 20 30
cmservice 0 0
namingservice 1 3 2
cleantest
set NamingOperationTimeout 25
set NamingOperationRetryTimeout 60
set SendLoadReportInterval 1
set PeriodicLoadPersistInterval 1
set ClusterStableWaitDuration 0

set ReplicaOpenFailureMaxRetryThreshold 1

# Updates should be processed often enough to always interrupt PLB
set ProcessPendingUpdatesInterval 0.1
set PeriodicStateScanInterval 0.1

# Placement is allowed to execute every second
set MinPlacementInterval 1

# Constraint check is allowed to execute as soon as there are constraints to be fixed
set MinConstraintCheckInterval 0


+10 cap=CPU:10
+20 cap=CPU:10
+30 cap=CPU:10
verify

# Use dummy PLB to control where primary is placed
set DummyPLBEnabled true

# Add a persisted service, CPU usage 10
createname fabric:/test_persisted
createservice fabric:/test_persisted TestPersistedStoreServiceType y 1 2 persist metrics=CPU,High,10,10

!waitforstate FM.Replica.Role.fabric:/test_persisted.30 Primary
!waitforstate FM.Replica.Role.fabric:/test_persisted.20 Secondary

# Report the load for the primary of persisted service to generate constraint violation
# NOTE: This constraint cannot be corrected now!
reportload fabric:/test_persisted 30 CPU=15
!pause 5
verifyloadvalue fabric:/test_persisted CPU primary 15

set DummyPLBEnabled false

# Now we will create another service, and verify that PLB will place it despite constraint violation
createname fabric:/stateless1
createservice fabric:/stateless1 CalculatorServiceType n 1 3 metrics=CPU,High,0,0

!waitforstate FM.Replica.State.fabric:/stateless1.10 Ready
!waitforstate FM.Replica.State.fabric:/stateless1.20 Ready
!waitforstate FM.Replica.State.fabric:/stateless1.30 Ready


# One more node, only for stateless services (stateful can't fit here)
+40 cap=CPU:5
verify

# Add few persisted services that can't open
injectfailure * fabric:/test_persisted_unstable service.endopen
createname fabric:/test_persisted_unstable
createservice fabric:/test_persisted_unstable TestPersistedStoreServiceType y 1 1 persist metrics=CPU,High,0,0

injectfailure * fabric:/test_persisted_unstable_a service.endopen
createname fabric:/test_persisted_unstable_a
createservice fabric:/test_persisted_unstable_a TestPersistedStoreServiceType y 1 1 persist metrics=CPU,High,0,0

injectfailure * fabric:/test_persisted_unstable_b service.endopen
createname fabric:/test_persisted_unstable_b
createservice fabric:/test_persisted_unstable_b TestPersistedStoreServiceType y 1 1 persist metrics=CPU,High,0,0

# Placement is allowed to execute as soon as there are replicas to be placed
set MinPlacementInterval 0

# Constraint check is allowed to execute every 2 seconds
set MinConstraintCheckInterval 2

# Wait for couple of seconds so that FM can start interrupting the PLB
!pause 10

# At this point, there should be lot of requests coming from FM to place new replicas
# Get one more node that can accept the primary of stateful service, and wait for it to move there
+50 cap=CPU:15
!waitforstate FM.Replica.Role.fabric:/test_persisted.50 Primary

!q