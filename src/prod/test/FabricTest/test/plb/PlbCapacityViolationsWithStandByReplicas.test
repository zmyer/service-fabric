# [owner:mmicic]
#
# This test validates that PLB takes into account standBy replicas load.
# These cases are tested:
# 1. Increasing the primary replica load when it is located on a node with standBy replica
#    and validation that primary replica is going to be moved
# 2. Increasing the secondary replica load when it is located on a node with standBy replica
#    and validation that secondary replica is going to be moved
# 3. Dropping standBy replica and validation that load from that node is removed
# 4. Increasing stand by replica load. Stand by replica is ex-secondary replica
# 5. Increasing stand by replica load. Stand by replica is ex-primary replica

votes 10 20 30
cmservice 0 0
namingservice 1 3 2
cleantest
set NamingOperationTimeout 25
set NamingOperationRetryTimeout 60
set SendLoadReportInterval 1
set PeriodicLoadPersistInterval 1
set PreventIntermediateOvercommit false
set DeletedReplicaKeepDuration 3

+10 cap=CPU:10
+20 cap=CPU:10
+30 cap=CPU:10
verify

#=====================
# 1. Increasing the primary replica load when it is located on a node with standBy replica
#    and validation that primary replica is going to be moved

-20
verify

set DummyPLBEnabled true
set ConstraintCheckEnabled false

# Add a persisted service A, CPU usage 2
createname fabric:/testA0
createservice fabric:/testA0 TestPersistedStoreServiceType y 1 2 persist metrics=CPU,High,2,2
!waitforstate FM.Replica.Role.fabric:/testA0.30 Primary
!waitforstate FM.Replica.Role.fabric:/testA0.10 Secondary
verify

+20 cap=CPU:10
verify

-30
verify 

!waitforstate FM.Replica.Role.fabric:/testA0.30 Idle
!waitforstate FM.Replica.Role.fabric:/testA0.10 Primary
!waitforstate FM.Replica.Role.fabric:/testA0.20 Secondary

+30 cap=CPU:10
verify

!waitforstate FM.Replica.Role.fabric:/testA0.30 Idle
!waitforstate FM.Replica.Role.fabric:/testA0.10 Primary
!waitforstate FM.Replica.Role.fabric:/testA0.20 Secondary

# Add a persisted service B, CPU usage 2
createname fabric:/testB0
createservice fabric:/testB0 TestPersistedStoreServiceType y 1 2 persist metrics=CPU,High,2,2
!waitforstate FM.Replica.Role.fabric:/testB0.30 Primary
!waitforstate FM.Replica.Role.fabric:/testB0.20 Secondary
verify


verifyloadvalue fabric:/testB0 CPU primary 2
verifyloadvalue fabric:/testB0 CPU secondary 2 20

# Increase the load on primary replica B, node with stand by replica
# 10 20 30
# A  a  a'
#    b  B
# 2  4  11
reportload fabric:/testB0 30 CPU=9

# Wait for the load reports to be persisted at the FM
!pause 10

verifyloadvalue fabric:/testB0 CPU primary 9
verifyloadvalue fabric:/testB0 CPU secondary 2 20

# We need regular PLB as dummy PLB doesn't do capacity checks
set DummyPLBEnabled false
set ConstraintCheckEnabled true
set PLBRewindInterval 1

# Primary of B should be swapped from 30 to 20 or moved out of the 30
# 10 20 30    or   10 20 30    or   10 20 30
# A     a             a  A             A  a
#    B  b          B  b             B  b
# 2  9  4          9  4  2          9  4  2
!waitforstate FM.Replica.Role.fabric:/testB0.30 Secondary|NullReplica
!waitforstate FM.Replica.Role.fabric:/testB0.20 Primary|Secondary
!waitforstate FM.Replica.Role.fabric:/testB0.10 Primary|NullReplica
verify

deleteservice fabric:/testA0
verify
deleteservice fabric:/testB0
verify
set PLBRewindInterval 300

#=====================
# 2. Increasing the secondary replica load when it is located on a node with standBy replica
#    and validation that secondary replica is going to be moved

set DummyPLBEnabled true
set ConstraintCheckEnabled false

# Add a persisted service A, CPU usage 2
createname fabric:/testA1
createservice fabric:/testA1 TestPersistedStoreServiceType y 1 2 persist metrics=CPU,High,2,2
!waitforstate FM.Replica.Role.fabric:/testA1.30 Primary
!waitforstate FM.Replica.Role.fabric:/testA1.20 Secondary
verify

-20
verify 

!waitforstate FM.Replica.Role.fabric:/testA1.20 Idle
!waitforstate FM.Replica.Role.fabric:/testA1.30 Primary
!waitforstate FM.Replica.Role.fabric:/testA1.10 Secondary

+20 cap=CPU:10
verify

!waitforstate FM.Replica.Role.fabric:/testA1.20 Idle
!waitforstate FM.Replica.Role.fabric:/testA1.30 Primary
!waitforstate FM.Replica.Role.fabric:/testA1.10 Secondary

# Add a persisted service B, CPU usage 2
createname fabric:/testB1
createservice fabric:/testB1 TestPersistedStoreServiceType y 1 2 persist metrics=CPU,High,2,2
!waitforstate FM.Replica.Role.fabric:/testB1.30 Primary
!waitforstate FM.Replica.Role.fabric:/testB1.20 Secondary
verify

verifyloadvalue fabric:/testB1 CPU primary 2
verifyloadvalue fabric:/testB1 CPU secondary 2 20

# Increase the load on secondary replica B, node with stand by replica
# 10 20 30
# a  a' A
#    b  B
# 2  11 4
reportload fabric:/testB1 20 CPU=9

# Wait for the load reports to be persisted at the FM
!pause 10

verifyloadvalue fabric:/testB1 CPU primary 2
verifyloadvalue fabric:/testB1 CPU secondary 9 20

# We need regular PLB as dummy PLB doesn't do capacity checks
set DummyPLBEnabled false
set ConstraintCheckEnabled true
set PLBRewindInterval 1

# Secondary B should be swapped to node 30 or it should be moved to node 10
# In both cases we should not have A stand by replica any more
# 10 20 30   or   10 20 30
# a  A               a  A
#    B  b         b     B
# 2  4  9         9  2  4
!waitforstate FM.Replica.Role.fabric:/testA1.10 Secondary|NullReplica
!waitforstate FM.Replica.Role.fabric:/testA1.20 Primary|Secondary
!waitforstate FM.Replica.Role.fabric:/testA1.30 Primary|NullReplica
!waitforstate FM.Replica.Role.fabric:/testB1.10 Secondary|NullReplica
!waitforstate FM.Replica.Role.fabric:/testB1.20 Primary|NullReplica
!waitforstate FM.Replica.Role.fabric:/testB1.30 Primary|Secondary
verify

deleteservice fabric:/testA1
verify
deleteservice fabric:/testB1
verify
set PLBRewindInterval 300

#==============
# 3. Dropping standBy replica and validation that load from that node is removed

set DummyPLBEnabled true
set ConstraintCheckEnabled false

# Add a persisted service A, CPU usage 8
createname fabric:/testA2
createservice fabric:/testA2 TestPersistedStoreServiceType y 1 2 persist metrics=CPU,High,8,8
!waitforstate FM.Replica.Role.fabric:/testA2.30 Primary
!waitforstate FM.Replica.Role.fabric:/testA2.20 Secondary
verify

-20
verify 

!waitforstate FM.Replica.Role.fabric:/testA2.20 Idle
!waitforstate FM.Replica.Role.fabric:/testA2.30 Primary
!waitforstate FM.Replica.Role.fabric:/testA2.10 Secondary

+20 cap=CPU:10
verify

!waitforstate FM.Replica.Role.fabric:/testA2.20 Idle
!waitforstate FM.Replica.Role.fabric:/testA2.30 Primary
!waitforstate FM.Replica.Role.fabric:/testA2.10 Secondary

+40 cap=CPU:10
verify

# Add a persisted service B, CPU usage 2
createname fabric:/testB2
createservice fabric:/testB2 TestPersistedStoreServiceType y 1 2 persist metrics=CPU,High,2,2
!waitforstate FM.Replica.Role.fabric:/testB2.40 Primary
!waitforstate FM.Replica.Role.fabric:/testB2.30 Secondary
verify

verifyloadvalue fabric:/testB2 CPU primary 2
verifyloadvalue fabric:/testB2 CPU secondary 2 30

# Increase the load on both secondary and primary B
# 10 20 30 40
# a  a' A
#       b  B
# 8  8  11 3
reportload fabric:/testB2 30 CPU=3
reportload fabric:/testB2 40 CPU=3

# Wait for the load reports to be persisted at the FM
!pause 10

verifyloadvalue fabric:/testB2 CPU primary 3
verifyloadvalue fabric:/testB2 CPU secondary 3 30

set DummyPLBEnabled false
set ConstraintCheckEnabled true
set PLBRewindInterval 1

!waitforstate FM.Replica.Role.fabric:/testA2.20 Idle
!waitforstate FM.Replica.Role.fabric:/testA2.30 Primary
!waitforstate FM.Replica.Role.fabric:/testA2.10 Secondary
!waitforstate FM.Replica.Role.fabric:/testB2.40 Primary
!waitforstate FM.Replica.Role.fabric:/testB2.30 Secondary
verify

# Verify that state is balanced and there is no overcommitted after stand by replica is removed
# Both cases are possible:
# 10 20 30 40    or     10 20 30 40
# a     A               a  A 
#    b     B                  b  B
# 8  3  8  3            8  8  3  3
updateservice fabric:/testA2 Stateful StandByReplicaKeepDuration=1

!waitforstate FM.Replica.Role.fabric:/testA2.10 Secondary
!waitforstate FM.Replica.Role.fabric:/testA2.20 NullReplica|Primary
!waitforstate FM.Replica.Role.fabric:/testA2.30 NullReplica|Primary
!waitforstate FM.Replica.Role.fabric:/testA2.40 NullReplica
!waitforstate FM.Replica.Role.fabric:/testB2.40 Primary
!waitforstate FM.Replica.Role.fabric:/testB2.30 NullReplica|Secondary
!waitforstate FM.Replica.Role.fabric:/testB2.20 NullReplica|Secondary
!waitforstate FM.Replica.Role.fabric:/testB2.10 NullReplica
verify

-40
deleteservice fabric:/testA2
verify
deleteservice fabric:/testB2
verify
set PLBRewindInterval 300

#==============
# 4. Increasing stand by replica load. Stand by replica is ex-secondary replica.

set DummyPLBEnabled true
set ConstraintCheckEnabled false

# Add a persisted service A, CPU usage 2
createname fabric:/testA3
createservice fabric:/testA3 TestPersistedStoreServiceType y 1 2 persist metrics=CPU,High,2,2

!waitforstate FM.Replica.Role.fabric:/testA3.30 Primary
!waitforstate FM.Replica.Role.fabric:/testA3.20 Secondary
verify

-20
verify 

!waitforstate FM.Replica.Role.fabric:/testA3.20 Idle
!waitforstate FM.Replica.Role.fabric:/testA3.30 Primary
!waitforstate FM.Replica.Role.fabric:/testA3.10 Secondary

+20 cap=CPU:10
verify

!waitforstate FM.Replica.Role.fabric:/testA3.20 Idle
!waitforstate FM.Replica.Role.fabric:/testA3.30 Primary
!waitforstate FM.Replica.Role.fabric:/testA3.10 Secondary

# Add a persisted service B, CPU usage 2
createname fabric:/testB3
createservice fabric:/testB3 TestPersistedStoreServiceType y 1 2 persist metrics=CPU,High,2,2
!waitforstate FM.Replica.Role.fabric:/testB3.30 Primary
!waitforstate FM.Replica.Role.fabric:/testB3.20 Secondary
verify

verifyloadvalue fabric:/testA3 CPU primary 2
verifyloadvalue fabric:/testA3 CPU secondary 2 20

# Increase the load on stand by replica A
# 10 20 30
# a  a' A
#    b  B
# 2  11 4
reportload fabric:/testA3 20 CPU=9

# Wait for the load reports to be persisted at the FM
!pause 10

verifyloadvalue fabric:/testA3 CPU primary 2
verifyloadvalue fabric:/testA3 CPU secondary 9 20

# We need regular PLB as dummy PLB doesn't do capacity checks
set DummyPLBEnabled false
set ConstraintCheckEnabled true
set PLBRewindInterval 1

# Secondary of B should be moved to node 10
# 10 20 30
# a  a' A 
# b     B 
# 4  9  4 
!waitforstate FM.Replica.Role.fabric:/testB3.10 Secondary
verify

deleteservice fabric:/testA3
verify
deleteservice fabric:/testB3
verify

#==============
# 5. Increasing stand by replica load. Stand by replica is ex-primary replica
# Cannot be tested because of the issue with the test infrastructure:
# load from ex-primary replica is considered as primary load.

#-20

#set DummyPLBEnabled true

# Add a persisted service A, CPU usage 2
#createname fabric:/testA4
#createservice fabric:/testA4 TestPersistedStoreServiceType y 1 2 persist metrics=CPU,High,2,2
#!waitforstate FM.Replica.Role.fabric:/testA4.30 Primary
#!waitforstate FM.Replica.Role.fabric:/testA4.10 Secondary
#verify

#+20 cap=CPU:10
#verify

#-30
#verify

#+30 cap=CPU:10
#verify

#!waitforstate FM.Replica.Role.fabric:/testA4.30 Idle
#!waitforstate FM.Replica.Role.fabric:/testA4.10 Primary
#!waitforstate FM.Replica.Role.fabric:/testA4.20 Secondary
#verify

# Add a persisted service B, CPU usage 2
#createname fabric:/testB4
#createservice fabric:/testB4 TestPersistedStoreServiceType y 1 2 persist metrics=CPU,High,2,2
#!waitforstate FM.Replica.Role.fabric:/testB4.30 Primary
#!waitforstate FM.Replica.Role.fabric:/testB4.20 Secondary
#verify

#verifyloadvalue fabric:/testA4 CPU primary 2
#verifyloadvalue fabric:/testA4 CPU secondary 2 20

#+40 cap=CPU:10
#verify

# Increase the load on stand by replica A
# 10 20 30 40
# A  a  a'
#    b  B
# 2  11 11
#reportload fabric:/testA4 30 CPU=9

# Wait for the load reports to be persisted at the FM
#!pause 10

#verifyloadvalue fabric:/testA4 CPU primary 2
#verifyloadvalue fabric:/testA4 CPU secondary 9 30

# We need regular PLB as dummy PLB doesn't do capacity checks
#set DummyPLBEnabled false
set PLBRewindInterval 1

# Primary and secondary of B should be moved out
# 10 20 30 40    or     10 20 30 40
# a  a' A               a  A
#       B  b               B  b
# 9  9  4  2            9  4  9
#!waitforstate FM.Replica.Role.fabric:/testB4.10 Primary|Secondary
#!waitforstate FM.Replica.Role.fabric:/testB4.40 Primary|Secondary
#verify

#==============

!q