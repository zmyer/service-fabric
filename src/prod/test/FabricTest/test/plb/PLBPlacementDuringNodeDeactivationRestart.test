#
# [owner] MMicic, MMohsin
# [bug] 3960115
#
# Allowing placement of replicas for stateless services with replicas on every node
# during upgrade until the deactivation message is sent to the node.
#
# Test is based on following sequence of events:
#
# 1. Blocking one node in DeactivationSafetyCheckInProgress state.
#    Validating that replicas from all service types will be placed on it during application upgrade.
# 2. Blocking one node in DeactivationSafetyCheckComplete state.
#    Validating that replicas from only service with replicas on every node will be placed on it during application upgrade.
# 3. Validating adding new replicas on those two type of deactivation statuses
#

votes 10 20 30
fmservice 2 1
namingservice 1 2 1
cmservice 2 1
cleantest

set DummyPLBEnabled true

# It is expected that application upgrade from 1.0 to 1.1 skips UD5 as there is no replica in it.
# If upgrade takes more than 5s (replica restart wait duration default) skip will not happen.
set UserReplicaRestartWaitDuration 9999

+10 ud=UD1
+20 ud=UD2
verify

# Application version 1.0
app.add version10 TestApp 1.0
app.clear version10
app.servicepack version10 ServicePackageA version=1.0
app.servicetypes version10 ServicePackageA ServiceTypeA1 stateful persist
app.servicetypes version10 ServicePackageA ServiceTypeA2 stateful
app.servicetypes version10 ServicePackageA ServiceTypeA3 stateless
app.codepack version10 ServicePackageA CodeA1 types=ServiceTypeA1,ServiceTypeA2,ServiceTypeA3 version=1.0
app.reqservices version10 Persisted1 ServiceTypeA1 stateful partition=1 replica=3 minreplicasetsize=2
app.reqservices version10 Volatile1 ServiceTypeA2 stateful partition=1 replica=3 minreplicasetsize=2
app.reqservices version10 Stateless1 ServiceTypeA3 stateless partition=1 instance=3
app.reqservices version10 StatelessOnEveryNode1 ServiceTypeA3 stateless partition=1 instance=-1
app.upload version10

# Application version 1.1
app.add version11 TestApp 1.1
app.clear version11
app.servicepack version11 ServicePackageA version=1.1
app.servicetypes version11 ServicePackageA ServiceTypeA1 stateful persist
app.servicetypes version11 ServicePackageA ServiceTypeA2 stateful
app.servicetypes version11 ServicePackageA ServiceTypeA3 stateless
app.codepack version11 ServicePackageA CodeA1 types=ServiceTypeA1,ServiceTypeA2,ServiceTypeA3 version=1.1
app.reqservices version11 Persisted1 ServiceTypeA1 stateful partition=1 replica=3 minreplicasetsize=2
app.reqservices version11 Volatile1 ServiceTypeA2 stateful partition=1 replica=3 minreplicasetsize=2
app.reqservices version11 Stateless1 ServiceTypeA3 stateless partition=1 instance=3
app.reqservices version11 StatelessOnEveryNode1 ServiceTypeA3 stateless partition=1 instance=-1
app.upload version11

# Application version 1.2
app.add version12 TestApp 1.2
app.clear version12
app.servicepack version12 ServicePackageA version=1.2
app.servicetypes version12 ServicePackageA ServiceTypeA1 stateful persist
app.servicetypes version12 ServicePackageA ServiceTypeA2 stateful
app.servicetypes version12 ServicePackageA ServiceTypeA3 stateless
app.codepack version12 ServicePackageA CodeA1 types=ServiceTypeA1,ServiceTypeA2,ServiceTypeA3 version=1.2
app.reqservices version12 Persisted1 ServiceTypeA1 stateful partition=1 replica=3 minreplicasetsize=2
app.reqservices version12 Volatile1 ServiceTypeA2 stateful partition=1 replica=3 minreplicasetsize=2
app.reqservices version12 Stateless1 ServiceTypeA3 stateless partition=1 instance=3
app.reqservices version12 StatelessOnEveryNode1 ServiceTypeA3 stateless partition=1 instance=-1
app.upload version12

provisionapp version10
provisionapp version11
provisionapp version12

# Create application version 1.0
createapp fabric:/MyApp TestApp 1.0
verify

!waitforstate FM.Replica.Role.fabric:/MyApp/Volatile1.20 Primary
!waitforstate FM.Replica.Role.fabric:/MyApp/Volatile1.10 Secondary

!waitforstate FM.Replica.Role.fabric:/MyApp/Persisted1.20 Primary
!waitforstate FM.Replica.Role.fabric:/MyApp/Persisted1.10 Secondary

+30 ud=UD3

!waitforstate FM.Replica.Role.fabric:/MyApp/Volatile1.30 Secondary
!waitforstate FM.Replica.Role.fabric:/MyApp/Persisted1.30 Secondary

# Adding more nodes for a test service
+40 ud=UD4
+50 ud=UD5
verify

# Creating test service - the only purpose of test service is to block deactivation of node
createname fabric:/testService0
createservice fabric:/testService0 TestPersistedStoreServiceType y 1 5 persist minreplicasetsize=5
!waitforstate FM.Replica.Role.fabric:/testService0.50 Primary
!waitforstate FM.Replica.Role.fabric:/testService0.40 Secondary
!waitforstate FM.Replica.Role.fabric:/testService0.30 Secondary
!waitforstate FM.Replica.Role.fabric:/testService0.20 Secondary
!waitforstate FM.Replica.Role.fabric:/testService0.10 Secondary
verify

# Making nodes down so test service will not allow node deactivation
-40
-50
verify

# Deactivating nodes in a batch with Restart intention
DeactivateNodes batch0 30:Restart

# Validate deactivation statuses and intentions
!waitforstate FM.Node.DeactivationIntent.30 Restart
!waitforstate FM.Node.DeactivationStatus.30 DeactivationSafetyCheckInProgress

# Validate the same deactivation states after 5s
!pause 5
!waitforstate FM.Node.DeactivationIntent.30 Restart
!waitforstate FM.Node.DeactivationStatus.30 DeactivationSafetyCheckInProgress

# Perform application upgrade from version 1.0 to 1.1
upgradeapp fabric:/MyApp 1.1 Rolling upgrademode=manual

verifyupgradeapp fabric:/MyApp upgradedomains=UD1
upgradeappmovenext fabric:/MyApp

verifyupgradeapp fabric:/MyApp upgradedomains=UD1,UD2
upgradeappmovenext fabric:/MyApp

# Verify that replicas on deactivating node are reopened for all services as it is still doing safety checks
!waitforstate FM.Replica.Role.fabric:/MyApp/Persisted1.30 Secondary
!waitforstate RA.FT.State.fabric:/MyApp/Volatile1.30 Open
!waitforstate RA.FT.State.fabric:/MyApp/Stateless1.30 Open
!waitforstate RA.FT.State.fabric:/MyApp/StatelessOnEveryNode1.30 Open

verifyupgradeapp fabric:/MyApp upgradedomains=UD1,UD2,UD3
upgradeappmovenext fabric:/MyApp

verifyupgradeapp fabric:/MyApp upgradedomains=UD1,UD2,UD3,UD4
upgradeappmovenext fabric:/MyApp

verifyupgradeapp fabric:/MyApp upgradedomains=UD1,UD2,UD3,UD4,UD5

RemoveNodeDeactivation batch0

verify

# second app upgrade to check placement on deactivated nodes

# Adding nodes back up
+40 ud=UD4
+50 ud=UD5
verify

# Deactivating nodes in a batch with Restart intention
DeactivateNodes batch1 30:Restart,40:Restart,50:Restart

# Validate deactivation statuses and intentions
!waitforstate FM.Node.DeactivationIntent.30 Restart
!waitforstate FM.Node.DeactivationIntent.40 Restart
!waitforstate FM.Node.DeactivationIntent.50 Restart
!waitforstate FM.Node.DeactivationStatus.30 DeactivationSafetyCheckComplete
!waitforstate FM.Node.DeactivationStatus.40 DeactivationSafetyCheckInProgress
!waitforstate FM.Node.DeactivationStatus.50 DeactivationSafetyCheckInProgress

# Validate the same deactivation states after 5s
!pause 5
!waitforstate FM.Node.DeactivationIntent.30 Restart
!waitforstate FM.Node.DeactivationIntent.40 Restart
!waitforstate FM.Node.DeactivationIntent.50 Restart
!waitforstate FM.Node.DeactivationStatus.30 DeactivationSafetyCheckComplete
!waitforstate FM.Node.DeactivationStatus.40 DeactivationSafetyCheckInProgress
!waitforstate FM.Node.DeactivationStatus.50 DeactivationSafetyCheckInProgress

# Creating additional stateless test service with replicas on every node
createname fabric:/testService1
createservice fabric:/testService1 CalculatorServiceType n 1 -1

# Verifying that replicas will be opened even on deactivating node
!waitforstate FM.Replica.State.fabric:/testService1.10 Ready
!waitforstate FM.Replica.State.fabric:/testService1.20 Ready
!waitforstate FM.Replica.State.fabric:/testService1.30 Ready
!waitforstate FM.Replica.State.fabric:/testService1.40 Ready
!waitforstate FM.Replica.State.fabric:/testService1.50 Ready

# Creating additional stateless test service
createname fabric:/testService2
createservice fabric:/testService2 CalculatorServiceType n 1 5

# Verifying that replicas will be opened on every node except on deactivating node
!waitforstate FM.Replica.State.fabric:/testService2.10 Ready
!waitforstate FM.Replica.State.fabric:/testService2.20 Ready
!waitforstate FM.Replica.State.fabric:/testService2.30 Dropped
!waitforstate FM.Replica.State.fabric:/testService2.40 Ready
!waitforstate FM.Replica.State.fabric:/testService2.50 Ready

# Perform application upgrade from version 1.1 to 1.2
upgradeapp fabric:/MyApp 1.2 Rolling upgrademode=manual

verifyupgradeapp fabric:/MyApp upgradedomains=UD1
upgradeappmovenext fabric:/MyApp

verifyupgradeapp fabric:/MyApp upgradedomains=UD1,UD2
upgradeappmovenext fabric:/MyApp

# Verify that replicas on deactivating node are reopened for all services as it is still doing safety checks
!waitforstate FM.Replica.Role.fabric:/MyApp/Persisted1.30 Idle
!waitforstate RA.FT.State.fabric:/MyApp/Volatile1.30 Closed
!waitforstate RA.FT.State.fabric:/MyApp/Stateless1.30 Closed
!waitforstate RA.FT.State.fabric:/MyApp/StatelessOnEveryNode1.30 Open

verifyupgradeapp fabric:/MyApp upgradedomains=UD1,UD2,UD3
upgradeappmovenext fabric:/MyApp

verifyupgradeapp fabric:/MyApp upgradedomains=UD1,UD2,UD3,UD4
upgradeappmovenext fabric:/MyApp

verifyupgradeapp fabric:/MyApp upgradedomains=UD1,UD2,UD3,UD4,UD5

RemoveNodeDeactivation batch1

verify

-*

!q
