###############################################################################
# Test: RGCodePackageUpgrade.Test
# Owners: nipuzovi, yangli, anuragg
# This test verifies code package upgrade only scenario for RG
###############################################################################

votes 10 20 30
namingservice 1 3 1
cmservice 3 1
cleantest

set NamingOperationTimeout 120
#use fast balancing
set PLBActionRetryTimes 30
set ExpectedReplicaUpgradeDuration 5
#Because we are changing RG policy we might need to restart code packages
set AllowHostFailureOnUpgrade true
#we need to be able to move replicas while in upgrade
set AllowConstraintCheckFixesDuringApplicationUpgrade true

# Do not check for available resources and do not enforce RG on the nodes
# This is to be able to execute the test on any machine, regardless 
set LocalResourceManagerTestMode true

+10 ud=UD1 cap=servicefabric:/_CpuCores:6,servicefabric:/_MemoryInMB:6000
+20 ud=UD2 cap=servicefabric:/_CpuCores:6,servicefabric:/_MemoryInMB:6000
+30 ud=UD3 cap=servicefabric:/_CpuCores:6,servicefabric:/_MemoryInMB:6000
verify

app.add versionTC1 TestAppTC1 vTC1
app.clear versionTC1
app.servicepack versionTC1 ServicePackageA version=v1 resources=CPU,2
app.servicetypes versionTC1 ServicePackageA ServiceTypeA1 stateful persist
app.servicetypes versionTC1 ServicePackageA ServiceTypeA2 stateful persist
app.codepack versionTC1 ServicePackageA CodeA1 types=ServiceTypeA1 version=v1 rgpolicies=MemoryInMB;1000
app.codepack versionTC1 ServicePackageA CodeA2 types=ServiceTypeA2 version=v1 rgpolicies=MemoryInMB;500
app.upload versionTC1 compress
provisionapp versionTC1

createapp fabric:/app1 TestAppTC1 vTC1
verify

createservice fabric:/app1/smallservice1 ServiceTypeA1 y 1 3 persist appname=fabric:/app1 servicePackageActivationMode=ExclusiveProcess
createservice fabric:/app1/smallservice2 ServiceTypeA2 y 1 3 persist appname=fabric:/app1 servicePackageActivationMode=ExclusiveProcess
verify

verifynodeload nodeid:10 servicefabric:/_CpuCores 4
verifynodeload nodeid:20 servicefabric:/_CpuCores 4
verifynodeload nodeid:30 servicefabric:/_CpuCores 4
verifynodeload nodeid:10 servicefabric:/_MemoryInMB 3000
verifynodeload nodeid:20 servicefabric:/_MemoryInMB 3000
verifynodeload nodeid:30 servicefabric:/_MemoryInMB 3000

verifyresourceonnode 10 servicefabric:/_CpuCores 4
verifyresourceonnode 20 servicefabric:/_CpuCores 4
verifyresourceonnode 30 servicefabric:/_CpuCores 4
verifyresourceonnode 10 servicefabric:/_MemoryInMB 3000
verifyresourceonnode 20 servicefabric:/_MemoryInMB 3000
verifyresourceonnode 30 servicefabric:/_MemoryInMB 3000

app.add versionTC2 TestAppTC1 vTC2 versionTC1
app.clear versionTC2
app.servicepack versionTC2 ServicePackageA version=v2 resources=CPU,2
app.servicetypes versionTC2 ServicePackageA ServiceTypeA1 stateful persist
app.servicetypes versionTC2 ServicePackageA ServiceTypeA2 stateful persist
app.codepack versionTC2 ServicePackageA CodeA1 types=ServiceTypeA1 version=v1 rgpolicies=MemoryInMB;1000
app.codepack versionTC2 ServicePackageA CodeA2 types=ServiceTypeA2 version=v2 rgpolicies=MemoryInMB;1000
app.upload versionTC2 compress
provisionapp versionTC2

upgradeapp fabric:/app1 vTC2 Rolling
verifyupgradeapp fabric:/app1
verify

verifynodeload nodeid:10 servicefabric:/_CpuCores 4
verifynodeload nodeid:20 servicefabric:/_CpuCores 4
verifynodeload nodeid:30 servicefabric:/_CpuCores 4
verifynodeload nodeid:10 servicefabric:/_MemoryInMB 4000
verifynodeload nodeid:20 servicefabric:/_MemoryInMB 4000
verifynodeload nodeid:30 servicefabric:/_MemoryInMB 4000

verifyresourceonnode 10 servicefabric:/_CpuCores 4
verifyresourceonnode 20 servicefabric:/_CpuCores 4
verifyresourceonnode 30 servicefabric:/_CpuCores 4
verifyresourceonnode 10 servicefabric:/_MemoryInMB 4000
verifyresourceonnode 20 servicefabric:/_MemoryInMB 4000
verifyresourceonnode 30 servicefabric:/_MemoryInMB 4000

!q
