#
# Tests different fabric upgrades that should roll back due to health checks.
# Health reporting happens directly through HM, bypassing health client so the reports are processed immediately.
#

set DummyPLBEnabled true
set ConstraintCheckEnabled false
set DeletedReplicaKeepDuration 1

votes 10 20 30 40 50
fmservice 3 2
cmservice 3 1
namingservice 1 3 2
cleantest

set ReportHealthThroughHMPrimary true
set HealthReportSendInterval 0
set HealthReportRetrySendInterval 2
set FabricUpgradeStatusPollInterval 5
set FabricUpgradeHealthCheckInterval 5
set NamingOperationTimeout 15
set NamingOperationRetryTimeout 150

# cluster health evaluation policies from cluster manifest
set ConsiderWarningAsError false
set MaxPercentUnhealthyNodes 0
set MaxPercentUnhealthyApplications 0

+10 ud=ud_1 version=4.2.762.0:version2
+20 ud=ud_2 version=4.2.762.0:version2
+30 ud=ud_3 version=4.2.762.0:version2
+40 ud=ud_1 version=4.2.762.0:version2
+50 ud=ud_2 version=4.2.762.0:version2
+60 ud=ud_2 version=4.2.762.0:version2
verify

#
# JSON policy format can be found through ServiceModel::ClusterHealthPolicy::ToString()
# Undefined fields are defaulted
#
!string jsonclusterpolicy \
{\
    "ConsiderWarningAsError":false,\
    "MaxPercentUnhealthyNodes":0,\
    "MaxPercentUnhealthyApplications":0\
}\

!string jsonclusterpolicy2 \
{\
    "ConsiderWarningAsError":false,\
    "MaxPercentUnhealthyNodes":20,\
    "MaxPercentUnhealthyApplications":0\
}\

!string jsonclusterupgradepolicy {"MaxPercentDeltaUnhealthyNodes":16,"MaxPercentUpgradeDomainDeltaUnhealthyNodes":21}
!string jsonclusterupgradepolicy2 {"MaxPercentDeltaUnhealthyNodes":20,"MaxPercentUpgradeDomainDeltaUnhealthyNodes":21}

# add app to the cluster
app.add version10 TestApp 1.0
app.clear version10

app.servicepack version10 ServicePackageA version=1.0
app.servicetypes version10 ServicePackageA ServiceTypeA1 stateful persist
app.codepack version10 ServicePackageA CodeA1 types=ServiceTypeA1 version=1.0
app.reqservices version10 ServiceA1 ServiceTypeA1 stateful partition=1 replica=3

app.upload version10
provisionapp version10

createapp fabric:/app1/upgradetest TestApp 1.0
verify

###################################
# Testcase 1: Fabric Upgrade failure testcases
###################################

prepareupgradefabric code=4.2.762.0 config=version2
provisionfabric code=4.2.762.0 config=version2

prepareupgradefabric code=4.2.763.0 config=version3
provisionfabric code=4.2.763.0 config=version3

#
# Baseline upgrade
#
upgradefabric code=4.2.762.0 config=version2 Rolling upgrademode=monitored failaction=rollback healthcheckwait=5 healthcheckretry=60 jsonpolicy=<string.jsonclusterpolicy> healthcheckstable=0
verifyupgradefabric
verify

###################################
# Testcase 1.1: Applications health check
# Upgrade should rollback because MaxPercentUnhealthyApplications is not respected
# Upgrade with or without delta checks should return the same reason.
###################################
# Report error on replica, which triggers application error

# Check that cluster is healthy and the FM node reports are received, so the nodes have ud attribute set.
# During the upgrade, reports are blocked to be able to deterministically test expected state.
queryhealth cluster expectedhealthstate=ok
checkhmentity node nodeid=10 state=ok ud=ud_1
checkhmentity node nodeid=20 state=ok ud=ud_2
checkhmentity node nodeid=30 state=ok ud=ud_3
checkhmentity node nodeid=40 state=ok ud=ud_1
checkhmentity node nodeid=50 state=ok ud=ud_2
checkhmentity node nodeid=60 state=ok ud=ud_2

# Wait for all replicas to be up
!waitforstate FM.FT.DroppedReplicaCount.fabric:/app1/upgradetest/ServiceA1#0 0

!var ServiceA1Replica0 FM.Replica.Id.fabric:/app1/upgradetest/ServiceA1#0#0
!var ServiceA1Partition0 FM.FT.PartitionId.fabric:/app1/upgradetest/ServiceA1#0

reporthealthinternal replica replica.id=<var.ServiceA1Replica0> partitionguid=<var.ServiceA1Partition0> sequencenumber=1 healthstate=error
queryhealth replica replica.id=<var.ServiceA1Replica0> partitionguid=<var.ServiceA1Partition0> expectedhealthstate=error

# Block all reports to prevent errors from being removed when entity instances are increased
addbehavior b1 * * ReportHealth

# Disable deltas
upgradefabric code=4.2.763.0 config=version3 Rolling upgrademode=monitored failaction=rollback healthcheckwait=0 healthcheckretry=60 enabledeltass=false healthcheckstable=0

# Inform test that a rollback is expected for fabric upgrade so that the verify validates that it is in original version
setrollbackfabric code=4.2.762.0 config=version2 expectedreason=applications,1,0 failurereason=HealthCheck

verifyupgradefabric
verify

# Enable deltas
upgradefabric code=4.2.763.0 config=version3 Rolling upgrademode=monitored failaction=rollback healthcheckwait=0 healthcheckretry=60 enabledeltass=true healthcheckstable=0
setrollbackfabric code=4.2.762.0 config=version2 expectedreason=applications,1,0

verifyupgradefabric
verify

removebehavior b1

# Clear state
reporthealthinternal replica replica.id=<var.ServiceA1Replica0> partitionguid=<var.ServiceA1Partition0> sequencenumber=2 healthstate=ok
queryhealth replica replica.id=<var.ServiceA1Replica0> partitionguid=<var.ServiceA1Partition0> expectedhealthstate=ok

###################################
# Testcase 1.2: Nodes health check with delta check disabled.
# Using default policy: unhealthy nodes
# Using less restrictive policy: unhealthy nodes per ud when delta is disabled
# Upgrade should rollback because of health checks.
###################################
queryhealth cluster expectedhealthstate=ok
checkhmentity node nodeid=10 state=ok ud=ud_1
checkhmentity node nodeid=20 state=ok ud=ud_2
checkhmentity node nodeid=30 state=ok ud=ud_3
checkhmentity node nodeid=40 state=ok ud=ud_1
checkhmentity node nodeid=50 state=ok ud=ud_2
checkhmentity node nodeid=60 state=ok ud=ud_2

reporthealthinternal node nodeid=50 sequencenumber=1 healthstate=error
queryhealth node nodeid=50 expectedhealthstate=error

reporthealthinternal node nodeid=60 sequencenumber=1 healthstate=error
queryhealth node nodeid=60 expectedhealthstate=error

# Block all reports to prevent errors from being removed
addbehavior b1 * * ReportHealth

upgradefabric code=4.2.763.0 config=version3 Rolling upgrademode=monitored failaction=rollback healthcheckwait=0 healthcheckretry=0 jsonpolicy=<string.jsonclusterpolicy> healthcheckstable=0
# Inform test that a rollback is expected because MaxPercentUnhealthyNodes is not respected
setrollbackfabric code=4.2.762.0 config=version2 expectedreason=nodes,2,0

verifyupgradefabric
verify

upgradefabric code=4.2.763.0 config=version3 Rolling upgrademode=monitored failaction=rollback healthcheckwait=5 healthcheckretry=0 jsonpolicy=<string.jsonclusterpolicy2> healthcheckstable=0
# Inform test that a rollback is expected because MaxPercentUnhealthyNodes per upgrade domain is not respected
setrollbackfabric code=4.2.762.0 config=version2 expectedreason=nodesperud,ud_2,2,20

verifyupgradefabric
verify

removebehavior b1

# Clear state
reporthealthinternal node nodeid=50 sequencenumber=2 healthstate=ok
queryhealth node nodeid=50 expectedhealthstate=ok

reporthealthinternal node nodeid=60 sequencenumber=2 healthstate=ok
queryhealth node nodeid=60 expectedhealthstate=ok

###################################
# Testcase 1.3: Cluster events health check
# Upgrade should rollback because of health check
###################################
queryhealth cluster expectedhealthstate=ok
checkhmentity node nodeid=10 state=ok ud=ud_1
checkhmentity node nodeid=20 state=ok ud=ud_2
checkhmentity node nodeid=30 state=ok ud=ud_3
checkhmentity node nodeid=40 state=ok ud=ud_1
checkhmentity node nodeid=50 state=ok ud=ud_2
checkhmentity node nodeid=60 state=ok ud=ud_2

reporthealthinternal cluster sequencenumber=1 healthstate=error
queryhealth cluster expectedhealthstate=error

upgradefabric code=4.2.763.0 config=version3 Rolling upgrademode=monitored failaction=rollback healthcheckwait=0 healthcheckretry=0 healthcheckstable=0

# Inform test that a rollback is expected because cluster is unhealthy due to event
setrollbackfabric code=4.2.762.0 config=version2 expectedreason=event,FabricTest_Source,FabricTest_Property

verifyupgradefabric
verify

# Clear state
reporthealthinternal cluster sequencenumber=2 healthstate=ok
queryhealth cluster expectedhealthstate=ok

###################################
# Testcase 1.4: System application health check
# Upgrade should rollback because of health check
###################################
queryhealth cluster expectedhealthstate=ok
checkhmentity node nodeid=10 state=ok ud=ud_1
checkhmentity node nodeid=20 state=ok ud=ud_2
checkhmentity node nodeid=30 state=ok ud=ud_3
checkhmentity node nodeid=40 state=ok ud=ud_1
checkhmentity node nodeid=50 state=ok ud=ud_2
checkhmentity node nodeid=60 state=ok ud=ud_2

queryhealth application appname=fabric:/System expectedhealthstate=ok
reporthealthinternal application appname=fabric:/System sequencenumber=1 healthstate=error
queryhealth application appname=fabric:/System expectedhealthstate=error

upgradefabric code=4.2.763.0 config=version3 Rolling upgrademode=monitored failaction=rollback healthcheckwait=0 healthcheckretry=60 healthcheckstable=0

# Inform test that a rollback is expected because the system application is unhealthy
setrollbackfabric code=4.2.762.0 config=version2 expectedreason=systemapp

verifyupgradefabric
verify

# Clear state
reporthealthinternal application appname=fabric:/System sequencenumber=2 healthstate=ok
queryhealth application appname=fabric:/System expectedhealthstate=ok

###################################
# Testcase 1.5: Nodes health check with delta check enabled.
# Use permissive health policy and upgrade policy with global delta not respected.
# Upgrade should rollback because of health checks.
###################################
queryhealth cluster expectedhealthstate=ok
checkhmentity node nodeid=10 state=ok ud=ud_1
checkhmentity node nodeid=20 state=ok ud=ud_2
checkhmentity node nodeid=30 state=ok ud=ud_3
checkhmentity node nodeid=40 state=ok ud=ud_1
checkhmentity node nodeid=50 state=ok ud=ud_2
checkhmentity node nodeid=60 state=ok ud=ud_2

# Block all reports to prevent errors from being removed
addbehavior b1 * * ReportHealth

# Block all replies from FM so we can report node errors before going to next UD
addbehavior b2 * * FabricUpgradeReply

# Start fabric upgrade with nodes healthy to take the snapshot
upgradefabric code=4.2.763.0 config=version3 Rolling upgrademode=monitored failaction=rollback healthcheckwait=0 healthcheckretry=0 \
    jsonpolicy=<string.jsonclusterpolicy2> enabledeltas=true jsonupgradepolicy=<string.jsonclusterupgradepolicy> healthcheckstable=0

# Inform test that a rollback is expected because global delta is not respected
setrollbackfabric code=4.2.762.0 config=version2 expectedreason=delta,0,6,1,6,16

reporthealthinternal node nodeid=50 sequencenumber=3 healthstate=error
queryhealth node nodeid=50 expectedhealthstate=error

removebehavior b2

verifyupgradefabric
verify

removebehavior b1

# Clear state
reporthealthinternal node nodeid=50 sequencenumber=4 healthstate=ok
queryhealth node nodeid=50 expectedhealthstate=ok

###################################
# Testcase 1.6: Nodes health check with delta check enabled.
# Use permissive health policy and upgrade policy with permissive global delta and UD delta not respected.
# Upgrade should rollback because of health checks.
###################################
queryhealth cluster expectedhealthstate=ok
checkhmentity node nodeid=10 state=ok ud=ud_1
checkhmentity node nodeid=20 state=ok ud=ud_2
checkhmentity node nodeid=30 state=ok ud=ud_3
checkhmentity node nodeid=40 state=ok ud=ud_1
checkhmentity node nodeid=50 state=ok ud=ud_2
checkhmentity node nodeid=60 state=ok ud=ud_2

# Block all reports to prevent errors from being removed
addbehavior b1 * * ReportHealth

# Block all replies from FM so we can report node errors before going to next UD
addbehavior b2 * * FabricUpgradeReply

# Start fabric upgrade with nodes healthy to take the snapshot
upgradefabric code=4.2.763.0 config=version3 Rolling upgrademode=monitored failaction=rollback healthcheckwait=0 healthcheckretry=0 \
    jsonpolicy=<string.jsonclusterpolicy2> enabledeltas=true jsonupgradepolicy=<string.jsonclusterupgradepolicy2> healthcheckstable=0

# Inform test that a rollback is expected because global delta is not respected
setrollbackfabric code=4.2.762.0 config=version2 expectedreason=uddelta,ud_2,0,3,1,3,21

reporthealthinternal node nodeid=50 sequencenumber=5 healthstate=error
queryhealth node nodeid=50 expectedhealthstate=error

removebehavior b2

verifyupgradefabric
verify

removebehavior b1

# Clear state
reporthealthinternal node nodeid=50 sequencenumber=6 healthstate=ok
queryhealth node nodeid=50 expectedhealthstate=ok


###################################
# Testcase 2: Use restrictive application health policy
# Upgrade should rollback because of health check.
###################################
queryhealth cluster expectedhealthstate=ok
checkhmentity node nodeid=10 state=ok ud=ud_1
checkhmentity node nodeid=20 state=ok ud=ud_2
checkhmentity node nodeid=30 state=ok ud=ud_3
checkhmentity node nodeid=40 state=ok ud=ud_1
checkhmentity node nodeid=50 state=ok ud=ud_2
checkhmentity node nodeid=60 state=ok ud=ud_2

queryhealth application appname=fabric:/System expectedhealthstate=ok
queryhealth application appname=fabric:/app1/upgradetest expectedhealthstate=ok

reporthealthinternal application appname=fabric:/System sequencenumber=3 healthstate=warning
queryhealth application appname=fabric:/System expectedhealthstate=warning

reporthealthinternal application appname=fabric:/app1/upgradetest sequencenumber=1 healthstate=warning
queryhealth application appname=fabric:/app1/upgradetest expectedhealthstate=warning

!string jsonsystemapppolicies {"ApplicationHealthPolicyMap":[{"Key":"fabric:/System","Value":{"ConsiderWarningAsError":true}}]}
!string jsonappwarningpolicies {"ApplicationHealthPolicyMap":[{"Key":"fabric:/app1/upgradetest","Value":{"ConsiderWarningAsError":true}}]}

upgradefabric code=4.2.763.0 config=version3 Rolling upgrademode=monitored failaction=manual healthcheckwait=0 healthcheckretry=60 apphealthpolicies=<string.jsonsystemapppolicies> healthcheckstable=0

verifyfabricupgradedesc code=4.2.763.0 config=version3 upgrademode=monitored failaction=manual healthcheckwait=0 healthcheckretry=60 apphealthpolicies=<string.jsonsystemapppolicies> 

# Check that cluster queries use upgrade-set policies instead of default
queryhealth cluster expectedhealthstate=error expectedreason=systemapp
queryhealthstatechunk cluster expectedhealthstate=error expectedreason=systemapp
checkisclusterhealthy upgradedomains=ud_1 expectedhealthy=false

# Check that application queries DO NOT use upgrade-set policies
queryhealth application appname=fabric:/System expectedhealthstate=warning
queryhealth application appname=fabric:/app1/upgradetest expectedhealthstate=warning

# Check that cluster and application queries that specify policy respect input policies
queryhealth cluster apphealthpolicies=<string.jsonappwarningpolicies> expectedhealthstate=error expectedreason=applications,1,0
queryhealthstatechunk cluster apphealthpolicies=<string.jsonappwarningpolicies> expectedhealthstate=error expectedreason=applications,1,0
queryhealth application appname=fabric:/System apppolicy=warningaserror expectedhealthstate=error
queryhealth application appname=fabric:/app1/upgradetest apppolicy=warningaserror expectedhealthstate=error

verifyupgradefabric upgradedomains=ud_1

# Update app health policy map for upgrade
updatefabricupgrade upgrademode=monitored failaction=rollback  apphealthpolicies=<string.jsonappwarningpolicies> 

verifyfabricupgradedesc code=4.2.763.0 config=version3 upgrademode=monitored failaction=rollback healthcheckwait=0 healthcheckretry=60 apphealthpolicies=<string.jsonappwarningpolicies> 

# Check that cluster queries use upgrade-set policies instead of default
queryhealth cluster expectedhealthstate=error expectedreason=applications,1,0
queryhealthstatechunk cluster expectedhealthstate=error expectedreason=applications,1,0
checkisclusterhealthy upgradedomains=ud_1 expectedhealthy=false

# Check that application queries DO NOT use upgrade-set policies
queryhealth application appname=fabric:/System expectedhealthstate=warning
queryhealth application appname=fabric:/app1/upgradetest expectedhealthstate=warning

# Check that cluster and application queries that specify policy respect input policies
queryhealth cluster apphealthpolicies=<string.jsonsystemapppolicies> expectedhealthstate=error expectedreason=systemapp
queryhealthstatechunk cluster apphealthpolicies=<string.jsonsystemapppolicies> expectedhealthstate=error expectedreason=systemapp
queryhealth application appname=fabric:/System apppolicy=warningaserror expectedhealthstate=error
queryhealth application appname=fabric:/app1/upgradetest apppolicy=warningaserror expectedhealthstate=error

# Upgrade rolls back because of app health
setrollbackfabric code=4.2.762.0 config=version2 expectedreason=applications,1,0 failurereason=HealthCheck

verifyupgradefabric
verify

# After upgrade, the default app health policies are used
queryhealth cluster expectedhealthstate=warning
checkisclusterhealthy upgradedomains=ud_1,ud_2,ud_3 expectedhealthy=true


#
# Without clearing state, do upgrade with default app policies
#

upgradefabric code=4.2.763.0 config=version3 Rolling upgrademode=monitored failaction=rollback healthcheckwait=5 healthcheckretry=60 jsonpolicy=<string.jsonclusterpolicy> healthcheckstable=0
verifyupgradefabric
verify

# Clear state
reporthealthinternal application appname=fabric:/System sequencenumber=4 healthstate=ok
reporthealthinternal application appname=fabric:/app1/upgradetest sequencenumber=2 healthstate=ok

queryhealth cluster expectedhealthstate=ok

unprovisionfabric code=4.2.762.0 config=version2

!q
