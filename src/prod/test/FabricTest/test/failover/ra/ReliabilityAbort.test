#
# [owner:hulyap]
# This test validates Abort scenarios
#
set DummyPLBEnabled true
set UserReplicaRestartWaitDuration 100
set RAPMessageRetryInterval 1
set ReconfigurationMessageRetryInterval 1
set MinActionRetryIntervalPerReplica 1
set EnableEndOfStreamAckOverride false
votes 10 20 30
cmservice 0 0
namingservice 1 3 2
cleantest

+10
+20
+30
verify

+40
+50
+60
verify

#
# Scenario: service stops pumping operations 
# abort comes
#

createname fabric:/statefulpersisted
createservice fabric:/statefulpersisted TestPersistedStoreServiceType y 1 3 persist

verify

# Verify current replica set
!waitforstate FM.Replica.Role.fabric:/statefulpersisted.60 Primary
!waitforstate FM.Replica.Role.fabric:/statefulpersisted.50 Secondary
!waitforstate FM.Replica.Role.fabric:/statefulpersisted.40 Secondary

# setsecondarypumpenabled is not supported for stateful persisted services.
# Use provider.secondarypump.block signal instead
#
setsignal 50 fabric:/statefulpersisted provider.secondarypump.block
clientput fabric:/statefulpersisted 10 10Data1
clientput fabric:/statefulpersisted 20 20Data1
clientput fabric:/statefulpersisted 30 30Data1
!wait

#trigger abort
addbehavior b1 * * DoReconfigurationReply
addbehavior b2 * * ReplicaUp

# need to enable secondary pump to allow the store service to cancel its pump and complete close
setsignal 50 fabric:/statefulpersisted service.beginchangerole.enablesecondarypump
reportfault 50 fabric:/statefulpersisted permanent

removebehavior b2

!waitforstate FM.Replica.State.fabric:/statefulpersisted.50 Dropped

removebehavior b1
verify

#
# Scenario - Stateful service returning failure from close
# Graceful close comes, retried
# Reports permanent fault
#
createname fabric:/stateful
createservice fabric:/stateful TestStoreServiceType y 1 3
verify

# Verify current replica set
!waitforstate FM.Replica.Role.fabric:/stateful.60 Primary
!waitforstate FM.Replica.Role.fabric:/stateful.50 Secondary
!waitforstate FM.Replica.Role.fabric:/stateful.40 Secondary

injectfailure 50 fabric:/stateful service.beginclose

addbehavior b1 * * DoReconfigurationReply
movesecondary fabric:/stateful 50 30

# allow retry

!pause 5
injectfailure 50 fabric:/stateful service.beginclose.reportfault.permanent

!pause 5

removefailure 50 fabric:/stateful service.beginclose.reportfault.permanent
removefailure 50 fabric:/stateful service.beginclose

removebehavior b1
verify

deleteservice fabric:/statefulpersisted
deleteservice fabric:/stateful
verify

#
# Scenario: service reports fault while opening during changerole and fails change role 
#

# transient
injectfailure 50 fabric:/statefulpersisted3 service.beginchangerole.reportfault.transient
injectfailure 50 fabric:/statefulpersisted3 service.beginchangerole

createname fabric:/statefulpersisted3
createservice fabric:/statefulpersisted3 TestPersistedStoreServiceType y 1 3 persist

!waitforstate RA.Replica.State.fabric:/statefulpersisted3.50.50 SB

removefailure 50 fabric:/statefulpersisted3 service.beginchangerole.reportfault.transient
removefailure 50 fabric:/statefulpersisted3 service.beginchangerole

verify

# permanent

injectfailure 50 fabric:/statefulpersisted4 service.beginchangerole.reportfault.permanent
injectfailure 50 fabric:/statefulpersisted4 service.beginchangerole

createname fabric:/statefulpersisted4
createservice fabric:/statefulpersisted4 TestPersistedStoreServiceType y 1 3 persist

!waitforstate RA.FT.State.fabric:/statefulpersisted4.50 Closed

removefailure 50 fabric:/statefulpersisted4 service.beginchangerole.reportfault.permanent
removefailure 50 fabric:/statefulpersisted4 service.beginchangerole

verify

#
# Scenario: service reports fault while opening during changerole and does not fail change role 
#

#transient
injectfailure 50 fabric:/statefulpersisted5 service.beginchangerole.reportfault.transient

createname fabric:/statefulpersisted5
createservice fabric:/statefulpersisted5 TestPersistedStoreServiceType y 1 3 persist

!waitforstate RA.Replica.State.fabric:/statefulpersisted5.50.50 SB

removefailure 50 fabric:/statefulpersisted5 service.beginchangerole.reportfault.transient

verify

#permanent
injectfailure 50 fabric:/statefulpersisted6 service.beginchangerole.reportfault.permanent

createname fabric:/statefulpersisted6
createservice fabric:/statefulpersisted6 TestPersistedStoreServiceType y 1 3 persist

!waitforstate RA.FT.State.fabric:/statefulpersisted6.50 Closed

removefailure 50 fabric:/statefulpersisted6 service.beginchangerole.reportfault.permanent

verify

#
# Scenario: service reports fault while opening during beginopen and fails open 
#

# transient
injectfailure 50 fabric:/statefulpersisted7 service.beginopen.reportfault.transient
injectfailure 50 fabric:/statefulpersisted7 service.beginopen

createname fabric:/statefulpersisted7
createservice fabric:/statefulpersisted7 TestPersistedStoreServiceType y 1 3 persist

!waitforstate FM.Replica.State.fabric:/statefulpersisted7.50 Dropped

removefailure 50 fabric:/statefulpersisted7 service.beginopen.reportfault.transient
removefailure 50 fabric:/statefulpersisted7 service.beginopen

verify

# permanent

injectfailure 50 fabric:/statefulpersisted8 service.beginopen.reportfault.permanent
injectfailure 50 fabric:/statefulpersisted8 service.beginopen

createname fabric:/statefulpersisted8
createservice fabric:/statefulpersisted8 TestPersistedStoreServiceType y 1 3 persist

!waitforstate FM.Replica.State.fabric:/statefulpersisted8.50 Dropped

removefailure 50 fabric:/statefulpersisted8 service.beginopen.reportfault.permanent
removefailure 50 fabric:/statefulpersisted8 service.beginopen

verify

#
# Scenario: service reports fault while opening during beginopen and does not fail open 
#

#transient
injectfailure 50 fabric:/statefulpersisted9 service.beginopen.reportfault.transient

createname fabric:/statefulpersisted9
createservice fabric:/statefulpersisted9 TestPersistedStoreServiceType y 1 3 persist

!waitforstate FM.Replica.State.fabric:/statefulpersisted9.50 Dropped

removefailure 50 fabric:/statefulpersisted9 service.beginopen.reportfault.transient

verify

#permanent
injectfailure 50 fabric:/statefulpersisted10 service.beginopen.reportfault.permanent

createname fabric:/statefulpersisted10
createservice fabric:/statefulpersisted10 TestPersistedStoreServiceType y 1 3 persist

!waitforstate FM.Replica.State.fabric:/statefulpersisted10.50 Dropped

removefailure 50 fabric:/statefulpersisted10 service.beginopen.reportfault.permanent

verify


##################################################
## Test ReportFault when service UpdateEpoch fail
##################################################
set UserReplicaRestartWaitDuration 5
+70
+80
+90
verify

########## for BeginUpdateEpoch ##########
###############################
## 1. Persisted service
###############################
#
# Add a persisted service.  It will be placed on 90,80,70,60,50.
#
createservice fabric:/persistedservice1 TestPersistedStoreServiceType y 1 5 persist
verify
# Expected: P90 S(80,70,60,50)

clientput fabric:/persistedservice1 10 10Data0
clientput fabric:/persistedservice1 20 20Data0
!wait

#####################################
## 1.1 UpdateEpoch on secondary replica
#####################################
+100
verify
swapprimary fabric:/persistedservice1 90 80
!waitforstate FM.Replica.Role.fabric:/persistedservice1.80 Primary
!waitforstate FM.Replica.Role.fabric:/persistedservice1.90 Secondary
verify
gfum
# Expected: P80 S(90,70,60,50)
#
injectfailure 70 fabric:/persistedservice1 provider.beginupdateepoch
clientput fabric:/persistedservice1 30 30Data0
!wait
# 70 should be restarted when it receives the replication operation
verify
gfum
!waitforstate FM.Replica.Role.fabric:/persistedservice1.70 Secondary
# Expected: P80 S(90,70,60,50)
removefailure 70 fabric:/persistedservice1 provider.beginupdateepoch

verify
#####################################################
## 1.2 UpdateEpoch on primary replica during swapprimary
## new primary will be restarted
#####################################################
injectfailure 60 fabric:/persistedservice1 provider.beginupdateepoch
gfum
swapprimary fabric:/persistedservice1 80 60
!waitforstate FM.Replica.Role.fabric:/persistedservice1.80 Primary
!waitforstate FM.Replica.Role.fabric:/persistedservice1.60 Secondary
verify
gfum
removefailure 60 fabric:/persistedservice1 provider.beginupdateepoch
# Expected: P80 S(90,70,60,50)

+110
+120
+130
verify
#####################################################
## 1.3 UpdateEpoch on primary replica when old primary down
## new primary restarted, and another primary is selected
#####################################################
injectfailure 90 fabric:/persistedservice1 provider.beginupdateepoch
gfum
-80
!waitforstate FM.Replica.Role.fabric:/persistedservice1.70 Primary
verify
gfum
removefailure 90 fabric:/persistedservice1 provider.beginupdateepoch
# Expected: P70 S(90,130,60,50)

clientget fabric:/persistedservice1 10 10Data0
clientget fabric:/persistedservice1 20 20Data0
!wait

deleteservice fabric:/persistedservice1

###############################
## 2. Volatile service
###############################
+80
-100
-110
-120
-130
verify


#
# Add a volatile service.  It will be placed on 90,80,70,60,50.
#
createservice fabric:/volatileservice1 TestStoreServiceType y 1 5
verify
# Expected: P90 S(80,70,60,50)

clientput fabric:/volatileservice1 10 10Data0
clientput fabric:/volatileservice1 20 20Data0
!wait

#####################################
## 2.1 UpdateEpoch on secondary replica
#####################################
+100
verify
swapprimary fabric:/volatileservice1 90 80
!waitforstate FM.Replica.Role.fabric:/volatileservice1.80 Primary
!waitforstate FM.Replica.Role.fabric:/volatileservice1.90 Secondary
verify
gfum
# Expected: P80 S(90,70,60,50)
#
injectfailure 70 fabric:/volatileservice1 provider.beginupdateepoch
clientput fabric:/volatileservice1 30 30Data0
!wait
# 70 should be dropped when it received the replication
verify
gfum
!waitforstate FM.Replica.Role.fabric:/volatileservice1.100 Secondary
# Expected: P80 S(90,100,60,50)
removefailure 70 fabric:/volatileservice1 provider.beginupdateepoch


+110
verify
#####################################################
## 2.2 UpdateEpoch on primary replica during swapprimary
## new primary will be dropped
#####################################################
injectfailure 60 fabric:/volatileservice1 provider.beginupdateepoch
gfum
swapprimary fabric:/volatileservice1 80 60
!waitforstate FM.Replica.Role.fabric:/volatileservice1.80 Primary
!waitforstate FM.Replica.Role.fabric:/volatileservice1.110 Secondary
verify
gfum
removefailure 60 fabric:/volatileservice1 provider.beginupdateepoch
# Expected: P80 S(90,100,110,50)


+120
+130
verify
#####################################################
## 2.3 UpdateEpoch on primary replica when old primary down
## new primary dropped, and another primary is seleced
#####################################################
injectfailure 110 fabric:/volatileservice1 provider.beginupdateepoch
gfum
-80
!waitforstate FM.Replica.Role.fabric:/volatileservice1.100 Primary
!waitforstate FM.Replica.Role.fabric:/volatileservice1.130 Secondary
!waitforstate FM.Replica.Role.fabric:/volatileservice1.120 Secondary
verify
gfum
removefailure 110 fabric:/volatileservice1 provider.beginupdateepoch
# Expected: P100 S(90,130,120,50)

clientget fabric:/volatileservice1 10 10Data0
clientget fabric:/volatileservice1 20 20Data0
!wait

deleteservice fabric:/volatileservice1

+80
-100
-110
-120
-130
verify

########## for EndUpdateEpoch ##########
###############################
## 1. Persisted service
###############################
#
# Add a persisted service.  It will be placed on 90,80,70,60,50.
#
createservice fabric:/persistedservice2 TestPersistedStoreServiceType y 1 5 persist
verify
# Expected: P90 S(80,70,60,50)

clientput fabric:/persistedservice2 10 10Data0
clientput fabric:/persistedservice2 20 20Data0
!wait

#####################################
## 1.1 UpdateEpoch on secondary replica
#####################################
+100
verify
swapprimary fabric:/persistedservice2 90 80
!waitforstate FM.Replica.Role.fabric:/persistedservice2.80 Primary
!waitforstate FM.Replica.Role.fabric:/persistedservice2.90 Secondary
verify
gfum
# Expected: P80 S(90,70,60,50)
#
injectfailure 70 fabric:/persistedservice2 provider.endupdateepoch
clientput fabric:/persistedservice2 30 30Data0
!wait
# 70 should be restarted when it receives the replication
verify
gfum
!waitforstate FM.Replica.Role.fabric:/persistedservice2.70 Secondary
# Expected: P80 S(90,70,60,50)
removefailure 70 fabric:/persistedservice2 provider.endupdateepoch


+110
verify
#####################################################
## 1.2 UpdateEpoch on primary replica during swapprimary
## new primary will be restarted
#####################################################
injectfailure 60 fabric:/persistedservice2 provider.endupdateepoch
gfum
swapprimary fabric:/persistedservice2 80 60
!waitforstate FM.Replica.Role.fabric:/persistedservice2.80 Primary
!waitforstate FM.Replica.Role.fabric:/persistedservice2.60 Secondary
verify
gfum
removefailure 60 fabric:/persistedservice2 provider.endupdateepoch
# Expected: P80 S(90,70,60,50)


+120
+130
verify
#####################################################
## 1.3 UpdateEpoch on primary replica when old primary down
## new primary restarted, and another primary is selected
#####################################################
injectfailure 90 fabric:/persistedservice2 provider.endupdateepoch
gfum
-80
!waitforstate FM.Replica.Role.fabric:/persistedservice2.70 Primary
verify
gfum
removefailure 90 fabric:/persistedservice2 provider.endupdateepoch
# Expected: P70 S(90,130,120,50)

clientget fabric:/persistedservice2 10 10Data0
clientget fabric:/persistedservice2 20 20Data0
!wait

deleteservice fabric:/persistedservice2

###############################
## 2. Volatile service
###############################
+80
-100
-110
-120
-130
verify


#
# Add a volatile service.  It will be placed on 90,80,70,60,50.
#
createservice fabric:/volatileservice2 TestStoreServiceType y 1 5
verify
# Expected: P90 S(80,70,60,50)

clientput fabric:/volatileservice2 10 10Data0
clientput fabric:/volatileservice2 20 20Data0
!wait

#####################################
## 2.1 UpdateEpoch on secondary replica
#####################################
+100
verify
swapprimary fabric:/volatileservice2 90 80
!waitforstate FM.Replica.Role.fabric:/volatileservice2.80 Primary
!waitforstate FM.Replica.Role.fabric:/volatileservice2.90 Secondary
verify
gfum
# Expected: P80 S(90,70,60,50)
#
injectfailure 70 fabric:/volatileservice2 provider.endupdateepoch
clientput fabric:/volatileservice2 30 30Data0
!wait
# 70 should be dropped when it received the replication
verify
gfum
!waitforstate FM.Replica.Role.fabric:/volatileservice2.100 Secondary
# Expected: P80 S(90,100,60,50)
removefailure 70 fabric:/volatileservice2 provider.endupdateepoch


+110
verify
#####################################################
## 2.2 UpdateEpoch on primary replica during swapprimary
## new primary will be dropped
#####################################################
injectfailure 60 fabric:/volatileservice2 provider.endupdateepoch
gfum
swapprimary fabric:/volatileservice2 80 60
!waitforstate FM.Replica.Role.fabric:/volatileservice2.80 Primary
!waitforstate FM.Replica.Role.fabric:/volatileservice2.110 Secondary
verify
gfum
removefailure 60 fabric:/volatileservice2 provider.endupdateepoch
# Expected: P80 S(90,100,110,50)


+120
+130
verify
#####################################################
## 2.3 UpdateEpoch on primary replica when old primary down
## new primary dropped, and another primary is seleced
#####################################################
injectfailure 110 fabric:/volatileservice2 provider.endupdateepoch
gfum
-80
!waitforstate FM.Replica.Role.fabric:/volatileservice2.100 Primary
!waitforstate FM.Replica.Role.fabric:/volatileservice2.130 Secondary
!waitforstate FM.Replica.Role.fabric:/volatileservice2.120 Secondary
verify
gfum
removefailure 110 fabric:/volatileservice2 provider.endupdateepoch
# Expected: P100 S(90,130,120,50)

clientget fabric:/volatileservice2 10 10Data0
clientget fabric:/volatileservice2 20 20Data0
!wait

deleteservice fabric:/volatileservice2

+80
-100
-110
-120
-130
verify

!q
