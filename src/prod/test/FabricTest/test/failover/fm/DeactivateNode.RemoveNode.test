#
# [owner] MMohsin
#
# This test case verifies the node deactivation behavior with intent RemoveNode.
#

votes 10 20 30

fmservice 3 2
cmservice 3 2
namingservice 1 3 2
cleantest

set DummyPLBEnabled true
set ExpectedClusterSize 3
set UserReplicaRestartWaitDuration 3600
set NamingOperationTimeout 10

+10
+20
+30
verify

+40
+50
verify

################################################################################
# Scenario 1: Base case:
#             1. Deactivate a node with intent RemoveNode
#             2. Ensure all the replicas are moved out of that node
#             3. Ensure no new replicas are created on that node
#             4. Ensure only expected number of new replicas are created
################################################################################

createservice fabric:/stateless1 CalculatorServiceType n 1 3
createservice fabric:/volatile1 TestStoreServiceType y 1 2
createservice fabric:/volatile2 TestStoreServiceType y 1 3 minreplicasetsize=2
createservice fabric:/volatile3 TestStoreServiceType y 1 3 minreplicasetsize=3
createservice fabric:/persisted1 TestPersistedStoreServiceType y 1 2 persist
createservice fabric:/persisted2 TestPersistedStoreServiceType y 1 3 persist minreplicasetsize=2
createservice fabric:/persisted3 TestPersistedStoreServiceType y 1 3 persist minreplicasetsize=3
verify

# Verify the initial replica count on each node
!waitforstate FM.UpReplicaCount.10 2
!waitforstate FM.UpReplicaCount.20 2
!waitforstate FM.UpReplicaCount.30 7
!waitforstate FM.UpReplicaCount.40 7
!waitforstate FM.UpReplicaCount.50 7

# Deactivate node 50 with intent RemoveNode
DeactivateNode 50 RemoveNode
!waitforstate FM.Node.DeactivationIntent.50 RemoveNode
!waitforstate FM.Node.DeactivationStatus.50 DeactivationComplete

# Create some more services
createservice fabric:/stateless2 CalculatorServiceType n 1 4
createservice fabric:/volatile4 TestStoreServiceType y 1 4 minreplicasetsize=3
createservice fabric:/persisted4 TestPersistedStoreServiceType y 1 4 persist minreplicasetsize=3
!wait

# Verify that the up replica count for node 50 is zero
!waitforstate FM.UpReplicaCount.10 5
!waitforstate FM.UpReplicaCount.20 10
!waitforstate FM.UpReplicaCount.30 12
!waitforstate FM.UpReplicaCount.40 10
!waitforstate FM.UpReplicaCount.50 0

# The persisted service replicas on node 50 should have been moved.
# Verify that the offline replica count for node 50 is zero.
!waitforstate FM.OfflineReplicaCount.50 0

ActivateNode 50
!waitforstate FM.Node.DeactivationIntent.50 None
!waitforstate FM.Node.DeactivationStatus.50 None
verify

################################################################################
# Scenario 2: Special case when TargetReplicaSetSize = 1
################################################################################

# Create some more services
createservice fabric:/volatile5 TestStoreServiceType y 1 1
createservice fabric:/persisted5 TestPersistedStoreServiceType y 1 1 persist
verify

!waitforstate FM.Replica.Role.fabric:/volatile5.50 Primary
!waitforstate FM.Replica.Role.fabric:/persisted5.50 Primary

DeactivateNode 50 RemoveNode
!waitforstate FM.Node.DeactivationIntent.50 RemoveNode
!waitforstate FM.Node.DeactivationStatus.50 DeactivationComplete
verify

ActivateNode 50
!waitforstate FM.Node.DeactivationIntent.50 None
!waitforstate FM.Node.DeactivationStatus.50 None
verify

################################################################################
# Scenario 3: Ensure primary is swapped out first before creating a replacement
#             replica
################################################################################

!waitforstate FM.Replica.Role.fabric:/volatile1.40 Primary
!waitforstate FM.Replica.Role.fabric:/volatile2.40 Primary
!waitforstate FM.Replica.Role.fabric:/volatile3.40 Primary
!waitforstate FM.Replica.Role.fabric:/volatile4.40 Primary
!waitforstate FM.Replica.Role.fabric:/volatile5.40 Primary
!waitforstate FM.Replica.Role.fabric:/persisted1.40 Primary
!waitforstate FM.Replica.Role.fabric:/persisted2.40 Primary
!waitforstate FM.Replica.Role.fabric:/persisted3.40 Primary
!waitforstate FM.Replica.Role.fabric:/persisted4.40 Primary
!waitforstate FM.Replica.Role.fabric:/persisted5.40 Primary

addbehavior b1 * * AddReplica

DeactivateNode 40 RemoveNode

!waitforstate FM.Replica.Role.fabric:/volatile1.30 Primary
!waitforstate FM.Replica.Role.fabric:/volatile2.30 Primary
!waitforstate FM.Replica.Role.fabric:/volatile3.30 Primary
!waitforstate FM.Replica.Role.fabric:/volatile4.30 Primary
!waitforstate FM.Replica.Role.fabric:/volatile5.50 Idle
!waitforstate FM.Replica.Role.fabric:/persisted1.30 Primary
!waitforstate FM.Replica.Role.fabric:/persisted2.30 Primary
!waitforstate FM.Replica.Role.fabric:/persisted3.30 Primary
!waitforstate FM.Replica.Role.fabric:/persisted4.30 Primary
!waitforstate FM.Replica.Role.fabric:/persisted5.50 Idle

removebehavior b1

!waitforstate FM.Node.DeactivationIntent.40 RemoveNode
!waitforstate FM.Node.DeactivationStatus.40 DeactivationComplete
verify

ActivateNode 40
!waitforstate FM.Node.DeactivationIntent.40 None
!waitforstate FM.Node.DeactivationStatus.40 None
verify

################################################################################
# Scenario 4: Safety check should not consider partitions that have no data
################################################################################

+60
verify

addbehavior b1 * * AddPrimaryReply
createservice fabric:/persisted6 TestPersistedStoreServiceType y 1 3 persist minreplicasetsize=3

!waitforstate FM.Replica.Role.fabric:/persisted6.60 Primary
!waitforstate RA.Replica.State.fabric:/persisted6.60.60 RD

removeruntime 60 y
!waitforstate FM.Replica.IsUp.fabric:/persisted6.60 false

removebehavior b1

DeactivateNode 60 RemoveNode
!waitforstate FM.Node.DeactivationIntent.60 RemoveNode
!waitforstate FM.Node.DeactivationStatus.60 DeactivationComplete

ActivateNode 60
!waitforstate FM.Node.DeactivationIntent.60 None
!waitforstate FM.Node.DeactivationStatus.60 None

addruntime 60 y
!waitforstate FM.Replica.IsUp.fabric:/persisted6.60 true

verify

################################################################################
# Scenario 5: Safety check should not consider partitions that are getting
#             deleted
################################################################################

!waitforstate FM.Replica.Role.fabric:/persisted6.60 Primary
!waitforstate FM.Replica.Role.fabric:/persisted6.50 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted6.40 Secondary

removeruntime 40 y
!waitforstate FM.Replica.IsUp.fabric:/persisted6.40 false

removeruntime 60 y
!waitforstate FM.Replica.IsUp.fabric:/persisted6.60 false

deleteservice fabric:/persisted6 errors=Timeout

DeactivateNodes batch5 40:RemoveNode,60:RemoveNode
VerifyNodeDeactivationStatus batch5 DeactivationComplete

addruntime 40 y
addruntime 60 y

RemoveNodeDeactivation batch5

deleteservice fabric:/persisted6 errors=UserServiceNotFound
verify

################################################################################
# Scenario 6: Safety checks should fail if the target node is a voter
################################################################################

DeactivateNode 10 RemoveNode
!waitforstate FM.Node.DeactivationIntent.10 RemoveNode
!waitforstate FM.Node.DeactivationStatus.10 DeactivationSafetyCheckInProgress

# All the up replicas should have been moved out of node 10
!waitforstate FM.UpReplicaCount.10 0

# Check again that the node deactivation is not complete
!waitforstate FM.Node.DeactivationStatus.10 DeactivationSafetyCheckInProgress

ActivateNode 10

################################################################################
# Scenario 7: ToBeDropped flag for node deactivation should get cleared if
#             the node gets activated
################################################################################

createservice fabric:/foo TestStoreServiceType y 1 6
verify

DeactivateNode 60 RemoveNode
!waitforstate FM.Node.DeactivationIntent.60 RemoveNode
!waitforstate FM.Node.DeactivationStatus.60 DeactivationSafetyCheckInProgress

!pause 5

!waitforstate FM.Node.DeactivationIntent.60 RemoveNode
!waitforstate FM.Node.DeactivationStatus.60 DeactivationSafetyCheckInProgress

!waitforstate FM.Replica.IsToBeDropped.fabric:/foo.60 true

ActivateNode 60
!waitforstate FM.Node.DeactivationIntent.60 None
!waitforstate FM.Node.DeactivationStatus.60 None

!waitforstate FM.Replica.IsToBeDropped.fabric:/foo.60 false

deleteservice fabric:/foo
verify

################################################################################
# Scenario 8: Node deactivation should not automatically complete if the node
#             is down
################################################################################

createservice fabric:/persisted8 TestPersistedStoreServiceType y 1 1 persist
verify

-60
!waitforstate FM.Replica.IsUp.fabric:/persisted8.60 false

DeactivateNode 60 RemoveNode
!waitforstate FM.Node.DeactivationIntent.60 RemoveNode
!waitforstate FM.Node.DeactivationStatus.60 DeactivationSafetyCheckInProgress

!pause 5

!waitforstate FM.Node.DeactivationIntent.60 RemoveNode
!waitforstate FM.Node.DeactivationStatus.60 DeactivationSafetyCheckInProgress

+60
verify

ActivateNode 60
!waitforstate FM.Node.DeactivationIntent.60 None
!waitforstate FM.Node.DeactivationStatus.60 None

deleteservice fabric:/persisted8
verify

################################################################################
# Scenario 9: Remove Data should send a message to the node 
# Node should use it to stop opening replicas and send back explicit reply
################################################################################

createservice fabric:/persisted9 TestPersistedStoreServiceType y 3 3 persist
verify

removeruntime 60 y
!waitforstate FM.Replica.IsUp.fabric:/persisted9.60 false

addbehavior b0 * * NodeDeactivateRequest

DeactivateNode 60 RemoveNode
!waitforstate FM.Node.DeactivationIntent.60 RemoveNode
!waitforstate FM.Node.DeactivationStatus.60 DeactivationSafetyCheckComplete

injectfailure 60 fabric:/persisted9 service.beginopen

addruntime 60 y
!waitforstate RA.Replica.IsUp.fabric:/persisted9.60.60 true

removebehavior b0
!waitforstate RA.Replica.IsUp.fabric:/persisted9.60.60 false

!waitforstate FM.Node.DeactivationIntent.60 RemoveNode
!waitforstate FM.Node.DeactivationStatus.60 DeactivationComplete

removefailure 60 fabric:/persisted9 service.beginopen
ActivateNode 60
verify

deleteservice fabric:/persisted9
verify

-*

!q
