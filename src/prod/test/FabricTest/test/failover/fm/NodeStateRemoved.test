#
# [owner] MMohsin, AnuragG
#
# This test covers the various scenarios for the NodeStateRemoved API.
#

votes 10 20 30
cleantest

fmservice 5 5
cmservice 5 1
namingservice 1 5 1

set DummyPLBEnabled true
set NamingOperationTimeout 15
set NamingOperationRetryTimeout 60
set UserReplicaRestartWaitDuration 600
set ExpectedClusterSize 5
set HealthReportSendInterval 0
set HealthReportRetrySendInterval 1

+10
+20
+30
+40
+50
verify

createservice fabric:/persisted TestPersistedStoreServiceType y 1 5 persist minreplicasetsize=3
verify
!var UserServiceFTID FM.FT.PartitionId.fabric:/persisted

################################################################################
# Scenario 1: Call NodeStateRemoved for a node that does not exist
################################################################################

nodestateremoved 100 NodeNotFound

# Check that the non-existent node should not present
!waitforstate FM.Node.Exists.100 false

################################################################################
# Scenario 2: Call NodeStateRemoved for a node that is up
################################################################################

addbehavior b1 * * AddReplica

!waitforstate FM.Replica.State.fabric:/persisted.30 Ready

nodestateremoved 30 NodeIsUp

!waitforstate FM.Replica.State.fabric:/persisted.30 Ready

removebehavior b1

!waitforstate FM.Node.Exists.30 true

################################################################################
# Scenario 3: Call NodeStateRemoved for a node that is down
################################################################################

set RemovedNodeKeepDuration 86400

-30 removedata
!waitforstate FM.Node.IsNodeStateRemoved.30 false
!waitforstate FM.Replica.IsUp.fabric:/persisted.30 false

nodestateremoved 30
!waitforstate FM.Node.IsNodeStateRemoved.30 true
!waitforstate FM.Replica.State.fabric:/persisted.30 Dropped

# Duplicate NodeStateRemoved should not change the state
nodestateremoved 30
!waitforstate FM.Node.IsNodeStateRemoved.30 true
!waitforstate FM.Replica.State.fabric:/persisted.30 Dropped

################################################################################
# Scenario 4: Removed node should eventually get deleted
################################################################################

# Remove/add a node so that the removed node does not have the highest
# health sequence number
-50
!waitforstate FM.Node.IsUp.50 false
+50
!waitforstate FM.Node.IsUp.50 true

set UserReplicaRestartWaitDuration 10
set RemovedNodeKeepDuration 1

# The removed node should have been deleted
!waitforstate FM.Node.Exists.30 false

+30
verify
set UserReplicaRestartWaitDuration 600

################################################################################
# Scenario 5: Trigger full rebuild by calling NodeStateRemoved
################################################################################

moveprimaryclient 10 <var.UserServiceFTID>
verify

-50 removedata
!waitforstate FM.Replica.IsUp.FMService.50 false
!waitforstate FM.Replica.IsUp.fabric:/persisted.50 false

-40 removedata
!waitforstate FM.Replica.IsUp.FMService.40 false
!waitforstate FM.Replica.IsUp.fabric:/persisted.40 false

-30 removedata
!waitforstate FM.Replica.IsUp.FMService.30 false

!waitforstate FM.FT.QuorumLost.FMService true

nodestateremoved 50 Timeout
nodestateremoved 40 Timeout

+60
+70
+80

!waitforstate FMM.Node.60 true
!waitforstate FMM.Node.70 true
!waitforstate FMM.Node.80 true

nodestateremoved 30

!waitforstate FM.FT.QuorumLost.FMService false
!waitforstate FM.Replica.Role.FMService.80 Primary

nodestateremoved 40
nodestateremoved 50

verify

################################################################################
# Scenario 6: Negative test case: If the state of the node has been removed
# and the NodeStateRemoved API has not been called, the system should still
# work correctly as long as there is no rebuild
################################################################################

+30
+40
+50
verify

!waitforstate FM.Replica.Role.FMService.10 Secondary
!waitforstate FM.Replica.Role.FMService.20 Secondary
!waitforstate FM.Replica.Role.FMService.60 Secondary
!waitforstate FM.Replica.Role.FMService.70 Secondary
!waitforstate FM.Replica.Role.FMService.80 Primary

!waitforstate FM.Replica.Role.fabric:/persisted.10 Primary
!waitforstate FM.Replica.Role.fabric:/persisted.20 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.60 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.70 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.80 Secondary

movesecondary fabric:/persisted 20 40
!waitforstate FM.Replica.Role.fabric:/persisted.40 Secondary
verify

moveprimaryclient 40 <var.UserServiceFTID>
!waitforstate FM.Replica.Role.fabric:/persisted.10 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.40 Primary
verify

movesecondary fabric:/persisted 10 50
!waitforstate FM.Replica.Role.fabric:/persisted.50 Secondary
verify

createservice fabric:/foo TestPersistedStoreServiceType y 1 3 persist
verify

addbehavior b1 * * GetLSN

-40 removedata
-50 removedata
-60 removedata

!waitforstate FM.Replica.IsUp.fabric:/persisted.40 false
!waitforstate FM.Replica.IsUp.fabric:/persisted.50 false
!waitforstate FM.Replica.IsUp.fabric:/persisted.60 false
!waitforstate FM.FT.QuorumLost.fabric:/persisted true

removebehavior b1

resetstore nodes=40,50,60 type=RA

deleteservice fabric:/foo

setsignal 80 fabric:/persisted replicator.beginondataloss.block

+40
+50
+60

waitforsignalhit 80 fabric:/persisted replicator.beginondataloss.block
resetsignal 80 fabric:/persisted replicator.beginondataloss.block

!waitforstate FM.Replica.State.fabric:/foo.60 Dropped|NullFT

verify

-*

!q