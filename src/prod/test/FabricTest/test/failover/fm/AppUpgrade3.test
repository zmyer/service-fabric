#
# [owner] MMohsin
#
# This test case covers the scenario where a partition has less than
# MinReplicaSetSize replicas but it still has a quourm of replicas.
# The safety check should fail because on the requirement is to have
# at least MinReplicaSetSize of replicas, and proceeding may cause 
# quorum loss.
#

votes 10 20 30
fmservice 3 2
namingservice 1 3 2
cmservice 3 2
cleantest

set UpgradeStatusPollInterval 5
set UserReplicaRestartWaitDuration 9999

+10 ud=UD1
+20 ud=UD2
+30 ud=UD3
verify

#
# Application version 1.0
#
app.add version10 TestApp 1.0
app.clear version10
app.servicepack version10 ServicePackageA version=1.0
app.servicetypes version10 ServicePackageA ServiceTypeA stateful persist
app.codepack version10 ServicePackageA CodeA1 types=ServiceTypeA version=1.0
app.upload version10
provisionapp version10

#
# Application version 1.1
#
app.add version11 TestApp 1.1
app.clear version11
app.servicepack version11 ServicePackageA version=1.1
app.servicetypes version11 ServicePackageA ServiceTypeA stateful persist
app.codepack version11 ServicePackageA CodeA1 types=ServiceTypeA version=1.1
app.upload version11
provisionapp version11

# Create application version 1.0
createapp fabric:/MyApp TestApp 1.0
verify

# Create services
createservice fabric:/MyApp/Persisted ServiceTypeA y 1 3 persist  minreplicasetsize=3 appname=fabric:/MyApp
verify

# Bring down node 30 so that the partition is below MinReplicaSetSize
-30
!waitforstate FM.Replica.IsUp.fabric:/MyApp/Persisted.30 false

#
# Perform application upgrade from version 1.0 to 1.1
#
upgradeapp fabric:/MyApp 1.1 Rolling upgrademode=manual

# Verify that upgrade gets blocked because of safety check failure
verifyupgradeapp fabric:/MyApp upgradedomains=UD1 timeout=30 expectTimeout

# Bring back node 30
+30 ud=UD3

# Upgrade should now proceed successfully
updateappupgrade fabric:/MyApp upgrademode=auto

verifyupgradeapp fabric:/MyApp

verify

-*

!q
