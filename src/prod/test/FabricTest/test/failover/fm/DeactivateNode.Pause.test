#
# [owner] MMohsin
#
# This test case verifies various scenarios for node deactivated with intent Pause.
#

votes 10 20 30

fmservice 3 2
cmservice 3 2
namingservice 1 3 2
cleantest

set DummyPLBEnabled true
set ExpectedClusterSize 3

+10
+20
+30
verify

+40
+50
verify

createservice fabric:/stateless1 CalculatorServiceType n 1 3
createservice fabric:/volatile1 TestStoreServiceType y 1 2
createservice fabric:/volatile2 TestStoreServiceType y 1 3 minreplicasetsize=2
createservice fabric:/volatile3 TestStoreServiceType y 1 3 minreplicasetsize=3
createservice fabric:/persisted1 TestPersistedStoreServiceType y 1 2 persist
createservice fabric:/persisted2 TestPersistedStoreServiceType y 1 3 persist minreplicasetsize=2
createservice fabric:/persisted3 TestPersistedStoreServiceType y 1 3 persist minreplicasetsize=3
verify

################################################################################
# Scenario 1: Ensure that no replicas are moved or created during node
#             deactivation with intent Pause
################################################################################

# Verify the initial replica count on each node
!waitforstate FM.UpReplicaCount.10 2
!waitforstate FM.UpReplicaCount.20 2
!waitforstate FM.UpReplicaCount.30 7
!waitforstate FM.UpReplicaCount.40 7
!waitforstate FM.UpReplicaCount.50 7

# Deactivate node 50 with intent Pause
DeactivateNode 50 Pause
!waitforstate FM.Node.DeactivationIntent.50 Pause
!waitforstate FM.Node.DeactivationStatus.50 DeactivationComplete

# Create some more services
createservice fabric:/stateless2 CalculatorServiceType n 1 -1
createservice fabric:/volatile4 TestStoreServiceType y 1 4 minreplicasetsize=3
createservice fabric:/persisted4 TestPersistedStoreServiceType y 1 4 persist minreplicasetsize=3
!wait

# Verify that the replica count for node 50 has not changed
!waitforstate FM.UpReplicaCount.10 5
!waitforstate FM.UpReplicaCount.20 5
!waitforstate FM.UpReplicaCount.30 10
!waitforstate FM.UpReplicaCount.40 10
!waitforstate FM.UpReplicaCount.50 7

ActivateNode 50
verify

################################################################################
# Scenario 2: Ensure that node deactivation does not complete if safety checks
#             fail
################################################################################

DeactivateNodes batch2a 30:Pause,40:Pause,50:Pause
VerifyNodeDeactivationStatus batch2a DeactivationSafetyCheckInProgress

!pause 5
VerifyNodeDeactivationStatus batch2a DeactivationSafetyCheckInProgress

RemoveNodeDeactivation batch2a

################################################################################
# Scenario 3: Ensure that safety checks are not performed and node deactivation
#             completes if PerformSafetyChecksForNodeDeactivationIntentPause is
#             is set to false
################################################################################

set PerformSafetyChecksForNodeDeactivationIntentPause false
DeactivateNodes batch3a 30:Pause,40:Pause,50:Pause
VerifyNodeDeactivationStatus batch3a DeactivationComplete
RemoveNodeDeactivation batch3a

-*

!q
